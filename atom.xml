<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Yan&#39;s blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-10-10T14:54:57.621Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Yan</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Ubuntu18.04安装与升级nodejs和npm</title>
    <link href="http://yoursite.com/2019/10/10/Ubuntu18.04%E5%AE%89%E8%A3%85%E4%B8%8E%E5%8D%87%E7%BA%A7nodejs%E5%92%8Cnpm/"/>
    <id>http://yoursite.com/2019/10/10/Ubuntu18.04安装与升级nodejs和npm/</id>
    <published>2019-10-10T14:54:56.000Z</published>
    <updated>2019-10-10T14:54:57.621Z</updated>
    
    <content type="html"><![CDATA[<h1 id="升级npm-命令"><a href="#升级npm-命令" class="headerlink" title="升级npm 命令"></a>升级npm 命令</h1><pre><code class="bash">sudo npm install npm -g</code></pre><a id="more"></a><h1 id="升级node-js命令步骤"><a href="#升级node-js命令步骤" class="headerlink" title="升级node.js命令步骤"></a>升级node.js命令步骤</h1><pre><code class="bash">sudo npm cache clean -f #----- 先清除 npm cachenpm install -g n #----- 安装 n 模块sudo n stable #----- 安装最新的 node.js 稳定版</code></pre><h1 id="查看版本"><a href="#查看版本" class="headerlink" title="查看版本"></a>查看版本</h1><pre><code class="bash">node -v    # 查看node.js版本npm -v     # 查看npm版本</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;升级npm-命令&quot;&gt;&lt;a href=&quot;#升级npm-命令&quot; class=&quot;headerlink&quot; title=&quot;升级npm 命令&quot;&gt;&lt;/a&gt;升级npm 命令&lt;/h1&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;sudo npm install npm -g
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
      <category term="Ubuntu" scheme="http://yoursite.com/categories/Ubuntu/"/>
    
      <category term="Ubuntu18.04安装与升级nodejs和npm" scheme="http://yoursite.com/categories/Ubuntu/Ubuntu18-04%E5%AE%89%E8%A3%85%E4%B8%8E%E5%8D%87%E7%BA%A7nodejs%E5%92%8Cnpm/"/>
    
    
      <category term="Ubuntu18.04安装与升级nodejs和npm" scheme="http://yoursite.com/tags/Ubuntu18-04%E5%AE%89%E8%A3%85%E4%B8%8E%E5%8D%87%E7%BA%A7nodejs%E5%92%8Cnpm/"/>
    
  </entry>
  
  <entry>
    <title>git使用</title>
    <link href="http://yoursite.com/1970/01/01/git%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/1970/01/01/git使用/</id>
    <published>1970-01-01T00:00:00.000Z</published>
    <updated>2019-06-03T05:43:52.083Z</updated>
    
    <content type="html"><![CDATA[<h1 id="提交文件到GitHub"><a href="#提交文件到GitHub" class="headerlink" title="提交文件到GitHub"></a>提交文件到GitHub</h1><p>具体步骤如下：    </p><ol><li>登录GitHub，复制git仓库的地址 <strong>[github_repository_url]</strong>。     </li><li>执行 <strong>git clone [github_repository_url]</strong>,将GitHub 的仓库克隆到本地。      </li><li>进入到克隆的仓库目录，若目录是很久之前克隆出来，需要使用 <strong>git pull</strong> 以更新到GitHub中的最新文件。     </li><li>执行 <strong>git add .</strong> 将所有改动添加到本地仓库中。      </li><li>执行 <strong>git commit -m “这次提交的内容的描述，自行填写”</strong> 将改动提交到本地仓库。     </li><li>执行 <strong>git push origin master</strong> 将本地的改动提交到GitHub，<strong>master</strong> 为主分支。</li></ol><h1 id="重写历史"><a href="#重写历史" class="headerlink" title="重写历史"></a>重写历史</h1><pre><code>git add Titlegit commit -m &quot;ceshi&quot;git commit --amend   ##重写上次提交的信息</code></pre><h1 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h1><p>首先，先创建<strong>dev</strong>,然后切换到<strong>dev</strong>分支：    </p><pre><code>git checkout -b dev</code></pre><p><strong>git checkout</strong> 命令加上<strong>-b</strong>参数表示创建并切换，相当于一下两条命令：      </p><pre><code>git branch devgit checkout dev</code></pre><p>然后用<strong>git branch</strong>命令查看当前分支：     </p><pre><code>git branch* dev  master</code></pre><p><strong>git branch</strong>命令会列出所有分支，当前分支前面会标一个*号。</p><p>之后提交同上步。</p><h2 id="合并分支"><a href="#合并分支" class="headerlink" title="合并分支"></a>合并分支</h2><pre><code>git merge dev</code></pre><p><strong>git merge</strong>命令用于合并指定分支到当前分支</p><h2 id="删除分支"><a href="#删除分支" class="headerlink" title="删除分支"></a>删除分支</h2><pre><code>git branch -d dev</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;提交文件到GitHub&quot;&gt;&lt;a href=&quot;#提交文件到GitHub&quot; class=&quot;headerlink&quot; title=&quot;提交文件到GitHub&quot;&gt;&lt;/a&gt;提交文件到GitHub&lt;/h1&gt;&lt;p&gt;具体步骤如下：    &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;登录GitHub，
      
    
    </summary>
    
      <category term="版本控制" scheme="http://yoursite.com/categories/%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6/"/>
    
      <category term="git" scheme="http://yoursite.com/categories/%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6/git/"/>
    
    
      <category term="版本控制" scheme="http://yoursite.com/tags/%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6/"/>
    
      <category term="git" scheme="http://yoursite.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>Docker搭建PHP、apache环境</title>
    <link href="http://yoursite.com/1970/01/01/Docker%E6%90%AD%E5%BB%BAPHP%E3%80%81apache%E7%8E%AF%E5%A2%83/"/>
    <id>http://yoursite.com/1970/01/01/Docker搭建PHP、apache环境/</id>
    <published>1970-01-01T00:00:00.000Z</published>
    <updated>2019-09-06T13:15:07.384Z</updated>
    
    <content type="html"><![CDATA[<h1 id="拉取Ubuntu镜像"><a href="#拉取Ubuntu镜像" class="headerlink" title="拉取Ubuntu镜像"></a>拉取Ubuntu镜像</h1><p>输入命令：   </p><pre><code class="bash">$ docker pull ubuntu</code></pre><a id="more"></a><h1 id="运行Ubuntu容器"><a href="#运行Ubuntu容器" class="headerlink" title="运行Ubuntu容器"></a>运行Ubuntu容器</h1><ol><li>确认是否已下载好镜像，输入命令：</li></ol><pre><code class="bash">$ docker images</code></pre><ol start="2"><li>上述命令之后如果出现以下情况，即为下载好了。</li></ol><pre><code class="bash">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZEubuntu              latest              3556258649b2        2 weeks ago         64.2MB</code></pre><ol start="3"><li>运行，输入命令：     </li></ol><pre><code class="bash">$ docker run -it -d --name ubuntu -p 80:80 ubuntu</code></pre><p>–name自定义容器名，-p指定端口映射，前者为虚拟机端口，后者为容器端口,成功后返回id<br>查看所有启动的容器。</p><ol start="4"><li>查看所有容器。</li></ol><pre><code class="bash">$ docker ps -a</code></pre><ol start="5"><li>如果是以下情况，则为运行成功。</li></ol><pre><code class="bash">CONTAINER ID        IMAGE               COMMAND             CREATED              STATUS              PORTS                  NAMESd5d8952f48b2        ubuntu              &quot;/bin/bash&quot;         About a minute ago   Up About a minute   0.0.0.0:8088-&gt;80/tcp   ubuntu</code></pre><h1 id="进入容器"><a href="#进入容器" class="headerlink" title="进入容器"></a>进入容器</h1><p>输入以下命令：    </p><pre><code class="bash">$ docker exec -it ubuntu /bin/bash</code></pre><h1 id="安装Apache2和PHP7-2"><a href="#安装Apache2和PHP7-2" class="headerlink" title="安装Apache2和PHP7.2"></a>安装Apache2和PHP7.2</h1><h2 id="配置软件源"><a href="#配置软件源" class="headerlink" title="配置软件源"></a>配置软件源</h2><p>输入以下命令：</p><pre><code class="bash"># sed -i &#39;s/archive.ubuntu.com/mirrors.ustc.edu.cn/g&#39; /etc/apt/sources.list# apt update</code></pre><h2 id="检查PHP和Apache模块"><a href="#检查PHP和Apache模块" class="headerlink" title="检查PHP和Apache模块"></a>检查PHP和Apache模块</h2><p>输入以下命令：     </p><pre><code class="bash"># apt list | grep libapache2-mod-php*</code></pre><p>结果为以下情况即为可以安装Apache2和PHP7.2</p><pre><code class="bash">WARNING: apt does not have a stable CLI interface. Use with caution in scripts.libapache2-mod-php/bionic,bionic 1:7.2+60ubuntu1 alllibapache2-mod-php7.2/bionic-updates,bionic-security 7.2.19-0ubuntu0.18.04.1 amd64</code></pre><h2 id="安装Apache2和PHP7-2-1"><a href="#安装Apache2和PHP7-2-1" class="headerlink" title="安装Apache2和PHP7.2"></a>安装Apache2和PHP7.2</h2><ul><li>安装</li></ul><pre><code class="bash"># apt install php7.2 libapache2-mod-php7.2</code></pre><ul><li>在安装过程需要设置php的时区，输入相对应的号码即可。</li><li>验证是否安装成功。</li></ul><pre><code class="bash">root@dd29dc7f7771:/# php -vPHP 7.2.19-0ubuntu0.18.04.1 (cli) (built: Jun  4 2019 14:48:12) ( NTS )Copyright (c) 1997-2018 The PHP GroupZend Engine v3.2.0, Copyright (c) 1998-2018 Zend Technologies    with Zend OPcache v7.2.19-0ubuntu0.18.04.1, Copyright (c) 1999-2018, by Zend Technologiesroot@dd29dc7f7771:/# apache2 -vServer version: Apache/2.4.29 (Ubuntu)Server built:   2019-07-16T18:14:45</code></pre><ul><li>配置 ServerName</li></ul><pre><code class="bash"># vi /etc/apache2/apache2.conf## 添加一行ServerName localhost</code></pre><ul><li>启动</li></ul><pre><code class="bash"># service apache2 start</code></pre><h2 id="查看PHP环境信息以及相关模块"><a href="#查看PHP环境信息以及相关模块" class="headerlink" title="查看PHP环境信息以及相关模块"></a>查看PHP环境信息以及相关模块</h2><p>在 <strong>/var/www/html</strong> 目录下新建文件phpinfo.php并添加如下代码：</p><pre><code class="php">&lt;?php    phpinfo();?&gt;</code></pre><p>通过浏览器输入<strong>IP/phpinfo.php</strong>访问。</p><p><a href="http://139.159.236.98/php/chap01/sec01/phpinfo.php" target="_blank" rel="noopener">Demo</a></p><h2 id="安装php-mysqli模块"><a href="#安装php-mysqli模块" class="headerlink" title="安装php-mysqli模块"></a>安装php-mysqli模块</h2><ul><li>安装</li></ul><pre><code class="bash"># apt install php-mysqli</code></pre><ul><li>使用命令打开<strong>vi /etc/php/7.2/apache2/php.ini</strong>去掉<strong>extension=mysqli.dll</strong>前面的<code>；</code>号，保存退出。</li><li>重新启动apache</li></ul><pre><code class="bash"># service apache2 restart</code></pre><h1 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h1><h2 id="phpmyadmin"><a href="#phpmyadmin" class="headerlink" title="phpmyadmin"></a>phpmyadmin</h2><p>命令如下：     </p><pre><code class="bash"># apt install wget    ## 如果已有可忽略# cd /avr/www/html# wget https://files.phpmyadmin.net/phpMyAdmin/4.9.0.1/phpMyAdmin-4.9.0.1-all-languages.zip     ## 下载phpmyadmin# apt install zip    ## 如果已有可忽略# unzip phpMyAdmin-4.9.0.1-all-languages.zip     ##解压# mv phpMyAdmin-4.9.0.1-all-languages phpmyadmin     ##重命名## 配置phpmyadmin连接远程数据库# vim /phpMyAdmin/libraries/config.default.php## 将  $cfg[&#39;Servers&#39;][$i][&#39;host&#39;] = ‘localhost’ 中的loaclhost改为自己的远程数据库IP</code></pre><p>在浏览器输入IP/phpmyadmin即可查看。<br><a href="http://139.159.236.98/phpmyadmin/" target="_blank" rel="noopener">Demo</a></p><h1 id="使用模板"><a href="#使用模板" class="headerlink" title="使用模板"></a>使用模板</h1><pre><code>## 首先需要创建一个目录作为映射目录# mkdir www## 拉取镜像# docker pull yancccccc/php-apache## 运行# docker run -it -d --name php-apache -p 80:80 -v $PWD/www:/var/www/html yancccccc/php-apache## 启动apache# docker exec -it php-apache /bin/bash# service apache2 start# exit## 安装phpmyadmin则将目录改为刚才创建的映射目录即可，其它步骤不需要改变。</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;拉取Ubuntu镜像&quot;&gt;&lt;a href=&quot;#拉取Ubuntu镜像&quot; class=&quot;headerlink&quot; title=&quot;拉取Ubuntu镜像&quot;&gt;&lt;/a&gt;拉取Ubuntu镜像&lt;/h1&gt;&lt;p&gt;输入命令：   &lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;$ docker pull ubuntu
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
      <category term="Docker" scheme="http://yoursite.com/categories/Docker/"/>
    
      <category term="PHP、apache" scheme="http://yoursite.com/categories/Docker/PHP%E3%80%81apache/"/>
    
    
      <category term="Docker" scheme="http://yoursite.com/tags/Docker/"/>
    
      <category term="PHP、apache" scheme="http://yoursite.com/tags/PHP%E3%80%81apache/"/>
    
  </entry>
  
  <entry>
    <title>Rocket.chat</title>
    <link href="http://yoursite.com/1970/01/01/Docker%E6%90%AD%E5%BB%BARocket.chat/"/>
    <id>http://yoursite.com/1970/01/01/Docker搭建Rocket.chat/</id>
    <published>1970-01-01T00:00:00.000Z</published>
    <updated>2019-03-23T05:01:07.832Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Docker-搭建-Rocket-chat"><a href="#Docker-搭建-Rocket-chat" class="headerlink" title="Docker 搭建 Rocket.chat"></a>Docker 搭建 Rocket.chat</h1><a id="more"></a><h2 id="安装-Docker"><a href="#安装-Docker" class="headerlink" title="安装 Docker"></a>安装 Docker</h2><blockquote><p>参考 <a href="https://yanxin152133.github.io/2019/03/21/Ubuntu18.04%20%E5%AE%89%E8%A3%85%20Docker/" target="_blank" rel="noopener">Ubuntu 安装 Docker</a></p></blockquote><h2 id="Rocket-chat-搭建"><a href="#Rocket-chat-搭建" class="headerlink" title="Rocket.chat 搭建"></a>Rocket.chat 搭建</h2><h3 id="获取镜像"><a href="#获取镜像" class="headerlink" title="获取镜像"></a>获取镜像</h3><p>请输入以下命令：    </p><pre><code>docker pull rocket.chat</code></pre><h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><ol><li><p>首先启动一个mongo实例     </p><pre><code>docker run --name db -d mongo:3.0 --smallfiles</code></pre></li><li><p>启动Rocket.chat链接到这个mongo实例     </p><pre><code>docker run --name rocketchat --link db -d rocket.chat</code></pre></li></ol><p>如果想直接在主机上的标准端口访问实例    </p><pre><code>docker run --name rocketchat -p 80:3000 --env ROOT_URL=http://localhost --link db -d rocket.chat</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Docker-搭建-Rocket-chat&quot;&gt;&lt;a href=&quot;#Docker-搭建-Rocket-chat&quot; class=&quot;headerlink&quot; title=&quot;Docker 搭建 Rocket.chat&quot;&gt;&lt;/a&gt;Docker 搭建 Rocket.chat&lt;/h1&gt;
    
    </summary>
    
      <category term="Docker" scheme="http://yoursite.com/categories/Docker/"/>
    
      <category term="Rocket.chat" scheme="http://yoursite.com/categories/Docker/Rocket-chat/"/>
    
    
      <category term="Rocket.chat" scheme="http://yoursite.com/tags/Rocket-chat/"/>
    
  </entry>
  
  <entry>
    <title>GitHub+Hexo搭建个人博客</title>
    <link href="http://yoursite.com/1970/01/01/GitHub+Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
    <id>http://yoursite.com/1970/01/01/GitHub+Hexo搭建个人博客/</id>
    <published>1970-01-01T00:00:00.000Z</published>
    <updated>2018-12-12T13:43:01.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="搭建步骤"><a href="#搭建步骤" class="headerlink" title="搭建步骤"></a>搭建步骤</h1><p> 1.GitHub 创建个人仓库<br> 2.安装Git<br> 3.安装Node.js<br> 4.安装Hexo<br> 5.美化<br> 6.部署</p><a id="more"></a><h2 id="1-GitHub-创建个人仓库"><a href="#1-GitHub-创建个人仓库" class="headerlink" title="1 GitHub 创建个人仓库"></a>1 GitHub 创建个人仓库</h2><h3 id="1-1-创建仓库（用户名-github-io"><a href="#1-1-创建仓库（用户名-github-io" class="headerlink" title="1.1 创建仓库（用户名.github.io)"></a>1.1 创建仓库（用户名.github.io)</h3><blockquote><p>1 登录GitHub,如果没有的话请先注册。  </p></blockquote><blockquote><p>2 登录之后点击GitHub 中的 <strong>New repository</strong>创建新的仓库.  </p></blockquote><blockquote><p>3 <strong>仓库名</strong>应为：<strong>用户名.github.io</strong> 比如：  </p></blockquote><p><img src="https://c1.staticflickr.com/2/1958/44469090564_fda7a69253.jpg" alt="仓库名"></p><h2 id="2-安装Git"><a href="#2-安装Git" class="headerlink" title="2 安装Git"></a>2 安装Git</h2><h3 id="2-1-安装Git"><a href="#2-1-安装Git" class="headerlink" title="2.1 安装Git"></a>2.1 安装Git</h3><blockquote><p>1 安装<a href="https://git-scm.com/" target="_blank" rel="noopener">Git</a>。  </p></blockquote><blockquote><p>2 下载安装成功后进行将自己的Github账号与Git进行绑定.   </p></blockquote><h3 id="2-2-配置"><a href="#2-2-配置" class="headerlink" title="2.2 配置"></a>2.2 配置</h3><blockquote><p>1 打开Git,并配置。输入以下命令：   </p></blockquote><pre><code>git config --global user.name &quot;自己注册GitHub的用户名&quot;  git config --global user.email &quot;注册GitHub时所用的邮箱&quot;</code></pre><h3 id="2-3-ssh"><a href="#2-3-ssh" class="headerlink" title="2.3 ssh"></a>2.3 ssh</h3><blockquote><p>1 设置user.name和user.email配置信息之后进行生成ssh密匙文件  </p></blockquote><pre><code>ssh-keygen -t rsa -C &quot;####@####.com&quot;</code></pre><blockquote><p>2 然后找到该命令生成的id_rsa.pub密匙。路径为 <strong>C:\Users\Admin\.ssh</strong>   </p></blockquote><p><img src="https://c1.staticflickr.com/2/1965/44469091184_af5e745164_b.jpg" alt="id_rsa.pub"></p><blockquote><p>3 打开该文件，推荐使用 <a href="https://code.visualstudio.com/?wt.mc_id=DX_841432" target="_blank" rel="noopener">Visual Studio Code </a>  打开  </p></blockquote><h3 id="2-4-GitHub-添加密匙"><a href="#2-4-GitHub-添加密匙" class="headerlink" title="2.4 GitHub 添加密匙"></a>2.4 GitHub 添加密匙</h3><blockquote><p>1 复制文件中的所有内容，然后进入 <strong>GitHub_Settings_Deploy keys</strong> 界面，点击右边的<strong>Add deploy key</strong> 如图所示：  </p></blockquote><p><img src="https://farm2.staticflickr.com/1909/45191106281_381d252f3a_z.jpg" alt="添加密匙">   </p><blockquote><p>2 新建 <strong>new SSH Key</strong>   </p></blockquote><blockquote><p>注： title可自定义内容，Key为<strong>之前复制的密匙</strong>   </p></blockquote><h3 id="2-5-检测"><a href="#2-5-检测" class="headerlink" title="2.5 检测"></a>2.5 检测</h3><blockquote><p>1 以上步骤完成后， 检测GitHub公匙是否成功，输入下面的命令：   </p></blockquote><pre><code>ssh git@github.com</code></pre><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://c1.staticflickr.com/2/1949/44469091074_67a44799a2_n.jpg" alt="ssh连接成功" title>                </div>                <div class="image-caption">ssh连接成功</div>            </figure>  <h2 id="3-安装Node-js"><a href="#3-安装Node-js" class="headerlink" title="3 安装Node.js"></a>3 安装Node.js</h2><h3 id="3-1-安装Node-js"><a href="#3-1-安装Node-js" class="headerlink" title="3.1 安装Node.js"></a>3.1 安装Node.js</h3><blockquote><p>1 下载并安装<a href="https://nodejs.org/zh-cn/" target="_blank" rel="noopener">Node.js</a>,根据自己的喜好下载不同的版本   </p></blockquote><h3 id="3-2-检测是否安装成功"><a href="#3-2-检测是否安装成功" class="headerlink" title="3.2  检测是否安装成功"></a>3.2  检测是否安装成功</h3><blockquote><p>1 检测Node.js是否安装成功  </p></blockquote><pre><code>node -v</code></pre><blockquote><p>2 检测nopm是否安装成功   </p></blockquote><pre><code>npm -v</code></pre><h2 id="4-安装Hexo"><a href="#4-安装Hexo" class="headerlink" title="4 安装Hexo"></a>4 安装Hexo</h2><h3 id="4-1-创建"><a href="#4-1-创建" class="headerlink" title="4.1 创建"></a>4.1 创建</h3><blockquote><p>1 创建一个文件夹，创建完成之后选择该文件夹并<strong>按住shift</strong>右键,如下图所示：   </p></blockquote><p><img src="https://farm2.staticflickr.com/1906/43377740100_eafa67eea2_z.jpg" alt="begin"> </p><h3 id="4-2-添加Hexo"><a href="#4-2-添加Hexo" class="headerlink" title="4.2 添加Hexo"></a>4.2 添加Hexo</h3><blockquote><p>1 依次输入,参考<a href="https://hexo.io/zh-cn/index.html" target="_blank" rel="noopener">Hexo官方文档</a>       </p></blockquote><pre><code>npm install hexo-cli -ghexo initnpm installhexo server</code></pre><h3 id="4-3-预览"><a href="#4-3-预览" class="headerlink" title="4.3 预览"></a>4.3 预览</h3><blockquote><p>1 在浏览器输入<strong>localhost:4000</strong>  </p></blockquote><blockquote><p>2 若出现错误，参考以下：   </p></blockquote><blockquote><p><a href="https://segmentfault.com/q/1010000003870970" target="_blank" rel="noopener">使用localhost:4000访问本地blog一直无响应</a><br><a href="https://segmentfault.com/q/1010000003870970/a-1020000004496534" target="_blank" rel="noopener">使用localhost:4000访问本地blog一直无响应</a><br><a href="https://www.jianshu.com/p/5f6b4a043baa" target="_blank" rel="noopener">使用localhost:4000访问本地blog一直无响应</a>  </p></blockquote><h2 id="5-美化"><a href="#5-美化" class="headerlink" title="5 美化"></a>5 美化</h2><h3 id="5-1-挑选主题"><a href="#5-1-挑选主题" class="headerlink" title="5.1 挑选主题"></a>5.1 挑选主题</h3><blockquote><p>1 <a href="https://hexo.io/themes/" target="_blank" rel="noopener">Hexo</a>官网提供的主题  </p></blockquote><blockquote><p>2 我使用的是yilia，<a href="https://yanxin152133.github.io/" target="_blank" rel="noopener">我的博客</a>  </p></blockquote><h3 id="5-2-下载主题"><a href="#5-2-下载主题" class="headerlink" title="5.2 下载主题"></a>5.2 下载主题</h3><blockquote><p>1 在根目录打开Git，输入   </p></blockquote><pre><code>git clone https://github.com/litten/hexo-theme-yilia.git themes/yilia</code></pre><h3 id="5-3-更新主题"><a href="#5-3-更新主题" class="headerlink" title="5.3 更新主题"></a>5.3 更新主题</h3><pre><code>cd thems/yiliagit pull</code></pre><h3 id="5-4-配置主题"><a href="#5-4-配置主题" class="headerlink" title="5.4 配置主题"></a>5.4 配置主题</h3><blockquote><p>1 根目录打开<strong>_config.yml</strong>配置文件   </p></blockquote><blockquote><p>2 将 <strong>themes:#####</strong> 改为 <strong>theme: yilia</strong>  </p></blockquote><h3 id="5-5-个性化主题"><a href="#5-5-个性化主题" class="headerlink" title="5.5 个性化主题"></a>5.5 个性化主题</h3><blockquote><p>1 打开 <strong>themes</strong> 下的 <strong>yilia</strong> 文件夹中的 <strong>_config.yml</strong>  </p></blockquote><blockquote><p>2 配置主题（添加头像，图标及其他）   </p></blockquote><pre><code># Headermenu:  主页: /  相册: /photos# SubNavsubnav:  #github: &quot;#&quot;  #weibo: &quot;#&quot;  #rss: &quot;#&quot;  #zhihu: &quot;#&quot;  #qq: &quot;#&quot;  #weixin: &quot;#&quot;  #jianshu: &quot;#&quot;  #douban: &quot;#&quot;  #segmentfault: &quot;#&quot;  #bilibili: &quot;#&quot;  #acfun: &quot;#&quot;  #mail: &quot;#&quot;  #facebook: &quot;#&quot;  #google: &quot;#&quot;  #twitter: &quot;#&quot;  #linkedin: &quot;#&quot;#rss: /atom.xmlurl: ## 是否需要修改 root 路径# 如果您的网站存放在子目录中，例如 http://yoursite.com/blog，# 请将您的 url 设为 http://yoursite.com/blog 并把 root 设为 /blog/。root: /# Content# 文章太长，截断按钮文字excerpt_link: more# 文章卡片右下角常驻链接，不需要请设置为falseshow_all_link: &#39;展开全文&#39;# 数学公式mathjax: false# 是否在新窗口打开链接open_in_new: false# 打赏# 打赏type设定：0-关闭打赏； 1-文章对应的md文件里有reward:true属性，才有打赏； 2-所有文章均有打赏reward_type: 0# 打赏wordingreward_wording: &#39;谢谢你请我吃糖果&#39;# 支付宝二维码图片地址，跟你设置头像的方式一样。比如：/assets/img/alipay.jpgalipay: # 微信二维码图片地址weixin: # 目录# 目录设定：0-不显示目录； 1-文章对应的md文件里有toc:true属性，才有目录； 2-所有文章均显示目录toc: 1# 根据自己的习惯来设置，如果你的目录标题习惯有标号，置为true即可隐藏hexo重复的序号；否则置为falsetoc_hide_index: true# 目录为空时的提示toc_empty_wording: &#39;目录，不存在的…&#39;# 是否有快速回到顶部的按钮top: true# Miscellaneousbaidu_analytics: &#39;&#39;google_analytics: &#39;&#39;#路径为E:\Blog\sourcefavicon: /assets/img/head.png#你的头像url   路径为E:\Blog\sourceavatar: /assets/img/face.jpg#是否开启分享share_jia: true#评论：1、多说；2、网易云跟帖；3、畅言；4、Disqus；5、Gitment#不需要使用某项，直接设置值为false，或注释掉#具体请参考wiki：https://github.com/litten/hexo-theme-yilia/wiki/#1、多说duoshuo: false#2、网易云跟帖wangyiyun: false#3、畅言changyan_appid: falsechangyan_conf: false#4、Disqus 在hexo根目录的config里也有disqus_shortname字段，优先使用yilia的disqus: false#5、Gitmentgitment_owner: false      #你的 GitHub IDgitment_repo: &#39;&#39;          #存储评论的 repogitment_oauth:  client_id: &#39;&#39;           #client ID  client_secret: &#39;&#39;       #client secret# 样式定制 - 一般不需要修改，除非有很强的定制欲望…style:  # 头像上面的背景颜色  header: &#39;#4d4d4d&#39;  # 右滑板块背景  slider: &#39;linear-gradient(200deg,#a0cfe4,#e8c37e)&#39;# slider的设置slider:  # 是否默认展开tags板块  showTags: false# 智能菜单# 如不需要，将该对应项置为false# 比如#smart_menu:#  friends: falsesmart_menu:  innerArchive: &#39;所有文章&#39;  friends: &#39;友链&#39;  aboutme: &#39;关于我&#39;friends:  友情链接: #aboutme: #</code></pre><blockquote><p>注：可以根据这个自己修改，<strong>记得保存</strong>  </p></blockquote><h2 id="6-部署"><a href="#6-部署" class="headerlink" title="6 部署"></a>6 部署</h2><h3 id="6-1-安装Git插件"><a href="#6-1-安装Git插件" class="headerlink" title="6.1 安装Git插件"></a>6.1 安装Git插件</h3><blockquote><p>1 为Hexo安装Git插件    </p></blockquote><pre><code>npm install hexo-deployer-git --save</code></pre><blockquote><p>2 修改根目录下的 <strong>_config.yml</strong> 配置文件。   </p></blockquote><pre><code>deploy:  type: git  repository: https://github.com/yanxin152133/yanxin152133.github.io.git  branch: master</code></pre><h3 id="6-2-部署"><a href="#6-2-部署" class="headerlink" title="6.2 部署"></a>6.2 部署</h3><blockquote><p>1 打开Git，输入：  </p></blockquote><pre><code>hexo d</code></pre><blockquote><p>2 成功的标志   </p></blockquote><p><img src="https://farm2.staticflickr.com/1950/45142671742_201b7fe47f_z.jpg" alt="success"></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;搭建步骤&quot;&gt;&lt;a href=&quot;#搭建步骤&quot; class=&quot;headerlink&quot; title=&quot;搭建步骤&quot;&gt;&lt;/a&gt;搭建步骤&lt;/h1&gt;&lt;p&gt; 1.GitHub 创建个人仓库&lt;br&gt; 2.安装Git&lt;br&gt; 3.安装Node.js&lt;br&gt; 4.安装Hexo&lt;br&gt; 5.美化&lt;br&gt; 6.部署&lt;/p&gt;
    
    </summary>
    
      <category term="Hexo" scheme="http://yoursite.com/categories/Hexo/"/>
    
      <category term="搭建" scheme="http://yoursite.com/categories/Hexo/%E6%90%AD%E5%BB%BA/"/>
    
    
      <category term="GitHub Hexo 个人博客" scheme="http://yoursite.com/tags/GitHub-Hexo-%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
  <entry>
    <title>Hexo yilia 添加Valine</title>
    <link href="http://yoursite.com/1970/01/01/Hexo%20yilia%20%E6%B7%BB%E5%8A%A0Valine/"/>
    <id>http://yoursite.com/1970/01/01/Hexo yilia 添加Valine/</id>
    <published>1970-01-01T00:00:00.000Z</published>
    <updated>2018-10-21T04:49:50.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h1><p> 1.Valine 介绍<br> 2.注册LeanCloud<br> 3.配置<br> 4.参考文档</p><a id="more"></a><h2 id="Valine-介绍"><a href="#Valine-介绍" class="headerlink" title="Valine 介绍"></a>Valine 介绍</h2><blockquote><p>Valine- 一款快速、简洁且高效的无后端评论系统。  </p></blockquote><blockquote><p>Valine 诞生于2017年8月7日，是一款基于Leancloud的快速、简洁且高效的无后端评论系统。理论上支持但不限于静态博客，目前已有Hexo、Jekyll、Typecho、Hugo 等博客程序在使用Valine。  </p></blockquote><h3 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h3><blockquote><p>快速<br>安全<br>Emoji 😉<br>无后端实现<br>MarkDown 全语法支持<br>轻量易用(~15kb gzipped)<br>文章阅读量统计 v1.2.0+</p></blockquote><h2 id="注册-LeanCloud"><a href="#注册-LeanCloud" class="headerlink" title="注册 LeanCloud"></a>注册 LeanCloud</h2><blockquote><p>注册 <a href="https://leancloud.cn/dashboard/login.html#/signup" target="_blank" rel="noopener">LeanCloud</a>  </p></blockquote><blockquote><p>注册完成后创建一个应用。然后打开设置-应用Key。如下图：  </p></blockquote><p><img src="https://farm2.staticflickr.com/1909/30501889127_29b161ac31_b.jpg" alt="key">  </p><blockquote><p>复制图中的 <strong>App ID</strong> <strong>App key</strong> <strong>Master Key</strong>  作为备用  </p></blockquote><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><blockquote><p><strong>_config.yml</strong>  </p></blockquote><pre><code>#6、Valine https://valine.js.orgvaline:  appid:  #Leancloud应用的appId appkey:  #Leancloud应用的appKey verify: false #验证码 notify: false #评论回复提醒 avatar: mm #评论列表头像样式：&#39;&#39;/mm/identicon/monsterid/wavatar/retro/hide placeholder: Just go go #评论框占位符</code></pre><blockquote><p><strong>layout/_partial/article.ejs</strong>  </p></blockquote><pre><code>   &lt;% if (theme.valine &amp;&amp; theme.valine.appid &amp;&amp; theme.valine.appkey){ %&gt;    &lt;section id=&quot;comments&quot; style=&quot;margin:10px;padding:10px;background:#fff;&quot;&gt;      &lt;%- partial(&#39;post/valine&#39;, {        key: post.slug,        title: post.title,        url: config.url+url_for(post.path)        }) %&gt;    &lt;/section&gt;  &lt;% } %&gt;&lt;% } %&gt;</code></pre><blockquote><p><strong>layout/_partial/post/valine.ejs</strong>  </p></blockquote><pre><code>&lt;div id=&quot;vcomment&quot; class=&quot;comment&quot;&gt;&lt;/div&gt; &lt;script src=&quot;//cdn1.lncld.net/static/js/3.0.4/av-min.js&quot;&gt;&lt;/script&gt;&lt;script src=&quot;//unpkg.com/valine/dist/Valine.min.js&quot;&gt;&lt;/script&gt;&lt;script&gt;   var notify = &#39;&lt;%= theme.valine.notify %&gt;&#39; == true ? true : false;   var verify = &#39;&lt;%= theme.valine.verify %&gt;&#39; == true ? true : false;    window.onload = function() {        new Valine({            el: &#39;.comment&#39;,            notify: notify,            verify: verify,            app_id: &quot;&lt;%= theme.valine.appid %&gt;&quot;,            app_key: &quot;&lt;%= theme.valine.appkey %&gt;&quot;,            placeholder: &quot;&lt;%= theme.valine.placeholder %&gt;&quot;,            avatar:&quot;&lt;%= theme.valine.avatar %&gt;&quot;        });    }&lt;/script&gt;</code></pre><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><blockquote><p>1 <a href="https://www.bluelzy.com/articles/use_valine_for_your_blog.html" target="_blank" rel="noopener">为你的Hexo加上评论系统-Valine</a><br>2 <a href="https://github.com/litten/hexo-theme-yilia/pull/646" target="_blank" rel="noopener">新增对Valine评论系统的支持</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;步骤&quot;&gt;&lt;a href=&quot;#步骤&quot; class=&quot;headerlink&quot; title=&quot;步骤&quot;&gt;&lt;/a&gt;步骤&lt;/h1&gt;&lt;p&gt; 1.Valine 介绍&lt;br&gt; 2.注册LeanCloud&lt;br&gt; 3.配置&lt;br&gt; 4.参考文档&lt;/p&gt;
    
    </summary>
    
      <category term="Hexo" scheme="http://yoursite.com/categories/Hexo/"/>
    
      <category term="Valine评论" scheme="http://yoursite.com/categories/Hexo/Valine%E8%AF%84%E8%AE%BA/"/>
    
    
      <category term="Hexo yilia Valine" scheme="http://yoursite.com/tags/Hexo-yilia-Valine/"/>
    
  </entry>
  
  <entry>
    <title>Hexo yilia 添加目录页面</title>
    <link href="http://yoursite.com/1970/01/01/Hexo%20yilia%20%E6%B7%BB%E5%8A%A0%E7%9B%AE%E5%BD%95%E9%A1%B5%E9%9D%A2/"/>
    <id>http://yoursite.com/1970/01/01/Hexo yilia 添加目录页面/</id>
    <published>1970-01-01T00:00:00.000Z</published>
    <updated>2018-12-17T14:02:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h1><p> 1.添加 categories 页面<br> 2.添加 categories 链接<br> 3.修改 yilia 主题<br> 4.多层分类<br> 5.效果<br> 6.参考文档</p><a id="more"></a><h2 id="1-添加-categories-页面"><a href="#1-添加-categories-页面" class="headerlink" title="1 添加 categories 页面"></a>1 添加 categories 页面</h2><h3 id="1-1-新建-categories-页面"><a href="#1-1-新建-categories-页面" class="headerlink" title="1.1 新建 categories 页面"></a>1.1 新建 categories 页面</h3><blockquote><p>输入命令： </p></blockquote><pre><code>hexo new page categories</code></pre><blockquote><p>该命令在 <strong>source</strong>  目录下生成一个 categories 目录，categories 目录下有一个 index.md 文件。  </p></blockquote><h3 id="1-2-修改-index-md-文件"><a href="#1-2-修改-index-md-文件" class="headerlink" title="1.2 修改 index.md 文件"></a>1.2 修改 index.md 文件</h3><pre><code>---title: 文章分类date: 2018-10-19 11:22:21type: &quot;categories&quot;layout: &quot;categories&quot;comments: false #关闭评论---</code></pre><h2 id="2-添加-categories-链接"><a href="#2-添加-categories-链接" class="headerlink" title="2 添加 categories 链接"></a>2 添加 categories 链接</h2><blockquote><p>若主题为 yilia ，则打开 yilia/_config.yml ，修改为：  </p></blockquote><pre><code>menu:  主页: /  相册: /  分类: /categories</code></pre><h2 id="3-修改-yilia-主题"><a href="#3-修改-yilia-主题" class="headerlink" title="3 修改 yilia 主题"></a>3 修改 yilia 主题</h2><h3 id="3-1-新建yilia-layout-categories-ejs"><a href="#3-1-新建yilia-layout-categories-ejs" class="headerlink" title="3.1 新建yilia/layout/categories.ejs"></a>3.1 新建yilia/layout/categories.ejs</h3><pre><code>&lt;article class=&quot;article article-type-post show&quot;&gt;  &lt;header class=&quot;article-header&quot;&gt;  &lt;h1 class=&quot;article-title&quot; itemprop=&quot;name&quot;&gt;    &lt;%= page.title %&gt;  &lt;/h1&gt;  &lt;/header&gt;  &lt;% if (site.categories.length){ %&gt;  &lt;div class=&quot;category-all-page article-type-post show&quot;&gt;    &lt;h3&gt;共计&amp;nbsp;&lt;%= site.categories.length %&gt;&amp;nbsp;个分类&lt;/h3&gt;    &lt;ul class=&quot;category-list&quot;&gt;    &lt;% site.categories.sort(&#39;name&#39;).each(function(item){ %&gt;      &lt;% if(item.posts.length){ %&gt;        &lt;li class=&quot;category-list-item&quot;&gt;          &lt;a href=&quot;&lt;%- config.root %&gt;&lt;%- item.path %&gt;&quot; title=&quot;&lt;%= item.name %&gt;&quot;&gt;&lt;%= item.name %&gt;&lt;sup&gt;[&lt;%= item.posts.length %&gt;]&lt;/sup&gt;&lt;/a&gt;        &lt;/li&gt;      &lt;% } %&gt;    &lt;% }); %&gt;    &lt;/ul&gt;  &lt;/div&gt;  &lt;% } %&gt;&lt;/article&gt;</code></pre><h3 id="3-2-修改-yilia-source-main-0cf68a-css，将下面的内容添加进去"><a href="#3-2-修改-yilia-source-main-0cf68a-css，将下面的内容添加进去" class="headerlink" title="3.2 修改 yilia\source\main.0cf68a.css，将下面的内容添加进去"></a>3.2 修改 yilia\source\main.0cf68a.css，将下面的内容添加进去</h3><pre><code>category-all-page {    margin: 30px 40px 30px 40px;    position: relative;    min-height: 70vh;  }  .category-all-page h2 {    margin: 20px 0;  }  .category-all-page .category-all-title {    text-align: center;  }  .category-all-page .category-all {    margin-top: 20px;  }  .category-all-page .category-list {    margin: 0;    padding: 0;    list-style: none;  }  .category-all-page .category-list-item-list-item {    margin: 10px 15px;  }  .category-all-page .category-list-item-list-count {    color: $grey;  }  .category-all-page .category-list-item-list-count:before {    display: inline;    content: &quot; (&quot;;  }  .category-all-page .category-list-item-list-count:after {    display: inline;    content: &quot;) &quot;;  }  .category-all-page .category-list-item {    margin: 10px 10px;  }  .category-all-page .category-list-count {    color: $grey;  }  .category-all-page .category-list-count:before {    display: inline;    content: &quot; (&quot;;  }  .category-all-page .category-list-count:after {    display: inline;    content: &quot;) &quot;;  }  .category-all-page .category-list-child {    padding-left: 10px;  }</code></pre><h2 id="4-多层分类"><a href="#4-多层分类" class="headerlink" title="4 多层分类"></a>4 多层分类</h2><h3 id="4-1-修改yilia-layout-categories-ejs为："><a href="#4-1-修改yilia-layout-categories-ejs为：" class="headerlink" title="4.1 修改yilia/layout/categories.ejs为："></a>4.1 修改yilia/layout/categories.ejs为：</h3><pre><code>&lt;article class=&quot;article article-type-post show&quot;&gt;  &lt;header class=&quot;article-header&quot; style=&quot;border-bottom: 1px solid #ccc&quot;&gt;  &lt;h1 class=&quot;article-title&quot; itemprop=&quot;name&quot;&gt;    &lt;%= page.title %&gt;  &lt;/h1&gt;  &lt;/header&gt;  &lt;% if (site.categories.length){ %&gt;  &lt;div class=&quot;category-all-page&quot;&gt;    &lt;h2&gt;共计&amp;nbsp;&lt;%= site.categories.length %&gt;&amp;nbsp;个分类&lt;/h2&gt;    &lt;%- list_categories(site.categories, {      show_count: true,      class: &#39;category-list-item&#39;,      style: &#39;list&#39;,      depth: 2,      separator: &#39;&#39;    }) %&gt;  &lt;/div&gt;  &lt;% } %&gt;&lt;/article&gt;</code></pre><h3 id="4-2-修改自己的文章"><a href="#4-2-修改自己的文章" class="headerlink" title="4.2 修改自己的文章"></a>4.2 修改自己的文章</h3><pre><code>---title: Hexo yilia 添加目录页面tags: Hexo yilia 添加目录toc: truecategories: [Hexo,创建目录]---</code></pre><h2 id="5-效果"><a href="#5-效果" class="headerlink" title="5 效果"></a>5 效果</h2><blockquote><p>如下图： </p></blockquote><p><img src="https://farm2.staticflickr.com/1914/30502562127_06a9af4659_b.jpg" alt="效果">  </p><h2 id="6-参考文档"><a href="#6-参考文档" class="headerlink" title="6 参考文档"></a>6 参考文档</h2><blockquote><p><a href="https://www.voidking.com/2018/06/11/deve-hexo-categories/#%E4%B9%A6%E7%AD%BE" target="_blank" rel="noopener">Hexo添加categories页面</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;步骤&quot;&gt;&lt;a href=&quot;#步骤&quot; class=&quot;headerlink&quot; title=&quot;步骤&quot;&gt;&lt;/a&gt;步骤&lt;/h1&gt;&lt;p&gt; 1.添加 categories 页面&lt;br&gt; 2.添加 categories 链接&lt;br&gt; 3.修改 yilia 主题&lt;br&gt; 4.多层分类&lt;br&gt; 5.效果&lt;br&gt; 6.参考文档&lt;/p&gt;
    
    </summary>
    
      <category term="Hexo" scheme="http://yoursite.com/categories/Hexo/"/>
    
      <category term="创建目录" scheme="http://yoursite.com/categories/Hexo/%E5%88%9B%E5%BB%BA%E7%9B%AE%E5%BD%95/"/>
    
    
      <category term="Hexo yilia 添加目录" scheme="http://yoursite.com/tags/Hexo-yilia-%E6%B7%BB%E5%8A%A0%E7%9B%AE%E5%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>Hexo主题casper使用教程</title>
    <link href="http://yoursite.com/1970/01/01/Hexo%E4%B8%BB%E9%A2%98casper%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/"/>
    <id>http://yoursite.com/1970/01/01/Hexo主题casper使用教程/</id>
    <published>1970-01-01T00:00:00.000Z</published>
    <updated>2019-04-17T14:08:16.453Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Hexo主题casper使用教程"><a href="#Hexo主题casper使用教程" class="headerlink" title="Hexo主题casper使用教程"></a>Hexo主题casper使用教程</h1><p>demo     </p><p><img src="https://live.staticflickr.com/65535/46905122234_0ab308a723.jpg" alt="casper"></p><a id="more"></a><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><pre><code>git clone https://github.com/xzhih/hexo-theme-casper.git themes/hexo-casper</code></pre><h2 id="更改主题为casper"><a href="#更改主题为casper" class="headerlink" title="更改主题为casper"></a>更改主题为casper</h2><p>把<strong>Hexo根目录</strong>的配置文件<strong>_config.yml</strong>中的<strong>theme</strong>改为<strong>hexo-casper</strong>。</p><h2 id="升级"><a href="#升级" class="headerlink" title="升级"></a>升级</h2><p>建议先备份以下再执行下面的操作。     </p><pre><code>cd themes/casper git pull</code></pre><h2 id="添加统一的文章模板参数"><a href="#添加统一的文章模板参数" class="headerlink" title="添加统一的文章模板参数"></a>添加统一的文章模板参数</h2><p>把下面的内容添加到<strong>Hexo根目录</strong>下的<strong>scaffolds/post.md</strong>。</p><pre><code>cover_img:     # 在文章摘要上显示feature_img:   # 在文章详细页面上置顶description:   # 文章描述keywords:      # 关键字</code></pre><h2 id="自定义配置"><a href="#自定义配置" class="headerlink" title="自定义配置"></a>自定义配置</h2><p>编辑<strong>themes/hexo-casper/_config.yml</strong>进行配置。    </p><pre><code># Configrss:            # linkfavicon: https://i.loli.net/2017/11/26/5a19c0b50432e.pngblog_logo: header_image: https://i.loli.net/2017/11/26/5a19c56faa29f.jpgbio: This is a demopost_toc: true# 菜单menu:  About: /about  Archives: /archives  # 其他的可以按照上面的模板添加# 作者author_image:   # 链接author_bio:     # 描述author_location: # 地址# 社交链接social:  facebook: https://www.facebook.com  twitter: https://www.twitter.com  twitter: https://twitter.com  facebook: https://facebook  telegram:  bilibili:  youtube:# 插件（显示在网站底部）widgets:  recent_posts: true  category: true  tagcloud: true  # 这是个简洁的主题，我认为3个就够了# 文章图片相册（点击图片可以放大）# https://github.com/sachinchoolur/lightgallery.jslightgallery: true# 懒加载# 首页已经默认开启，其他页面在此开启# https://github.com/dinbror/blazylazyload: true# 搜索功能local_search: true# Valine 评论系统# https://valine.js.orgcomment: falsevaline:  notify: false # mail notifier , https://github.com/xCss/Valine/wiki   verify: false # Verification code  appId: # your leancloud application appid  appKey: # your leancloud application appkey  placeholder: Just go go # comment box placeholder  avatar: mm # gravatar style  pageSize: 10 # pagination size# PWA # 你需要在 hexo 目录的 source 文件夹里创建一个 manifest.json 文件manifest: falseservice_workers: falsenavColor: &#39;3c484e&#39;# Baidu 链接提交baidu: false# Google AnalyticsgoogleAnalytics: falseGA_TRACKING_ID: UA-XXXXXXXXXX-1</code></pre><h2 id="本地搜索功能"><a href="#本地搜索功能" class="headerlink" title="本地搜索功能"></a>本地搜索功能</h2><h3 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h3><pre><code>npm install hexo-generator-search --save</code></pre><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>在<strong>Hexo根目录</strong>下中的<strong>_config.yml</strong>进行配置。    </p><pre><code>search：   path：search.xml    field：post    content：true</code></pre><p>path-文件路径。默认为search.xml。如果文件扩展名为.json，则输出格式为JSON。否则将导出XML格式文件。<br>filed-要搜索的文件范围。   </p><ul><li>post（默认）-所有帖子  </li><li>page -所有页面    </li><li>all -所有帖子和页面    </li></ul><p>content-是否包含每篇文章的全部内容。默认为true。如果false，生成的结果仅覆盖没有主体的标题和其他元信息。</p><h3 id="排除索引"><a href="#排除索引" class="headerlink" title="排除索引"></a>排除索引</h3><p>要将某个帖子或页面排除在索引之外，您只需indexing: false在其前端的顶部插入设置，例如：     </p><pre><code>title: &quot;Code Highlight&quot;date: &quot;2014-03-15 20:17:16&quot;tags: highlightcategories: Demodescription: &quot;A collection of Hello World applications from helloworld.org.&quot;toc: trueindexing: false---</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Hexo主题casper使用教程&quot;&gt;&lt;a href=&quot;#Hexo主题casper使用教程&quot; class=&quot;headerlink&quot; title=&quot;Hexo主题casper使用教程&quot;&gt;&lt;/a&gt;Hexo主题casper使用教程&lt;/h1&gt;&lt;p&gt;demo     &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://live.staticflickr.com/65535/46905122234_0ab308a723.jpg&quot; alt=&quot;casper&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Hexo" scheme="http://yoursite.com/categories/Hexo/"/>
    
      <category term="Hexo主题casper使用教程" scheme="http://yoursite.com/categories/Hexo/Hexo%E4%B8%BB%E9%A2%98casper%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="Hexo主题casper使用教程" scheme="http://yoursite.com/tags/Hexo%E4%B8%BB%E9%A2%98casper%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>LoadRunner</title>
    <link href="http://yoursite.com/1970/01/01/LoadRunner/"/>
    <id>http://yoursite.com/1970/01/01/LoadRunner/</id>
    <published>1970-01-01T00:00:00.000Z</published>
    <updated>2019-05-11T06:14:47.837Z</updated>
    
    <content type="html"><![CDATA[<h1 id="LoadRunner-11-0"><a href="#LoadRunner-11-0" class="headerlink" title="LoadRunner 11.0"></a>LoadRunner 11.0</h1><h2 id="准备："><a href="#准备：" class="headerlink" title="准备："></a>准备：</h2><ul><li>LoadRunner 11.0 安装包</li><li>LoadRunner 11.0 破解相关文件</li></ul><a id="more"></a><h2 id="下载："><a href="#下载：" class="headerlink" title="下载："></a>下载：</h2><ul><li>LoadRunner 11.0 安装包（迅雷下载）：<a href="http://www.genilogix.com/downloads/loadrunner/loadrunner-11.iso" target="_blank" rel="noopener">http://www.genilogix.com/downloads/loadrunner/loadrunner-11.iso</a></li><li><a href="https://link.jianshu.com/?t=https://pan.baidu.com/s/1nu9r7tf" target="_blank" rel="noopener">LoadRunner 11.0 破解相关文件</a></li></ul><h2 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h2><ol><li><p>打开<strong>LoadRunner 11.0 安装包</strong>文件夹，点击<strong>setup.exe</strong>。  </p></li><li><p>点击<strong>LoadRunner完整安装程序</strong>，接着按提示进行下去，当它提示缺省文件的时候可以直接打开“附加组件”进入“Monitor Probe for Microsoft COM+ Server Components”这个文件夹，运行“Com_Plus_Probe.exe”文件即可。       </p></li><li><p>安装成功即进入主界面，进入的时候会有一个提示框出现，意思就是你拥有10天的试用权限。     </p></li></ol><h2 id="破解"><a href="#破解" class="headerlink" title="破解"></a>破解</h2><ol><li><p>打开<strong>LoadRunner 11.0 破解相关文件</strong>，将<strong>mlr5lprg.dll</strong>和<strong>lm70.dll</strong>这两个文件<strong>复制替换</strong>到<strong>LoadRunner安装目录的/bin文件下</strong>。</p></li><li><p>以管理员身份运行<strong>deletelicense.exe</strong></p></li><li><p>管理员身份运行LoadRunner。</p></li><li><p>点击“configuration-&gt;loadRunner License”进入界面，现在你就可以new你自己的license了。下面是不同数量并发的代码：<br>10000个并发：AEABEXFR-YTIEKEKJJMFKEKEKWBRAUNQJU-KBYGB<br>提供一个超级license 最高支持6.5w个并发：AEACFSJI-YJKJKJJKEJIJD-BCLBR。</p></li></ol><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://blog.51cto.com/kinghinds/908502" target="_blank" rel="noopener">loadRunner 安装及破解</a></p><p><a href="https://www.jianshu.com/p/b3b5f24d7877" target="_blank" rel="noopener">LoadRunner 11.0安装+汉化+破解</a></p><p><a href="https://blog.csdn.net/u010298501/article/details/36199745" target="_blank" rel="noopener">loadRunner破解不成功的几个原因</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;LoadRunner-11-0&quot;&gt;&lt;a href=&quot;#LoadRunner-11-0&quot; class=&quot;headerlink&quot; title=&quot;LoadRunner 11.0&quot;&gt;&lt;/a&gt;LoadRunner 11.0&lt;/h1&gt;&lt;h2 id=&quot;准备：&quot;&gt;&lt;a href=&quot;#准备：&quot; class=&quot;headerlink&quot; title=&quot;准备：&quot;&gt;&lt;/a&gt;准备：&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;LoadRunner 11.0 安装包&lt;/li&gt;
&lt;li&gt;LoadRunner 11.0 破解相关文件&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="软件测试" scheme="http://yoursite.com/categories/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95/"/>
    
      <category term="LoadRunner" scheme="http://yoursite.com/categories/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95/LoadRunner/"/>
    
    
      <category term="软件测试" scheme="http://yoursite.com/tags/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95/"/>
    
      <category term="LoadRunner" scheme="http://yoursite.com/tags/LoadRunner/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot整合Druid</title>
    <link href="http://yoursite.com/1970/01/01/Spring%20Boot%20%E6%95%B4%E5%90%88Druid/"/>
    <id>http://yoursite.com/1970/01/01/Spring Boot 整合Druid/</id>
    <published>1970-01-01T00:00:00.000Z</published>
    <updated>2019-06-30T05:43:06.735Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Spring-Boot整合Druid"><a href="#Spring-Boot整合Druid" class="headerlink" title="Spring Boot整合Druid"></a>Spring Boot整合Druid</h1><a id="more"></a><h2 id="pom-xml"><a href="#pom-xml" class="headerlink" title="pom.xml"></a>pom.xml</h2><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;    &lt;parent&gt;        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;        &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;        &lt;version&gt;2.1.5.RELEASE&lt;/version&gt;        &lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt;    &lt;/parent&gt;    &lt;groupId&gt;com.example&lt;/groupId&gt;    &lt;artifactId&gt;spring-boot-06-data-jdbc&lt;/artifactId&gt;    &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;    &lt;name&gt;spring-boot-06-data-jdbc&lt;/name&gt;    &lt;description&gt;Demo project for Spring Boot&lt;/description&gt;    &lt;properties&gt;        &lt;java.version&gt;1.8&lt;/java.version&gt;    &lt;/properties&gt;    &lt;dependencies&gt;        &lt;dependency&gt;            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;            &lt;artifactId&gt;spring-boot-starter-jdbc&lt;/artifactId&gt;        &lt;/dependency&gt;        &lt;dependency&gt;            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;        &lt;/dependency&gt;        &lt;dependency&gt;            &lt;groupId&gt;mysql&lt;/groupId&gt;            &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;            &lt;scope&gt;runtime&lt;/scope&gt;        &lt;/dependency&gt;        &lt;dependency&gt;            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;            &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;            &lt;scope&gt;test&lt;/scope&gt;        &lt;/dependency&gt;        &lt;!--引入druid数据源--&gt;        &lt;!-- https://mvnrepository.com/artifact/com.alibaba/druid --&gt;        &lt;dependency&gt;            &lt;groupId&gt;com.alibaba&lt;/groupId&gt;            &lt;artifactId&gt;druid&lt;/artifactId&gt;            &lt;version&gt;1.1.17&lt;/version&gt;        &lt;/dependency&gt;    &lt;/dependencies&gt;    &lt;build&gt;        &lt;plugins&gt;            &lt;plugin&gt;                &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;                &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;            &lt;/plugin&gt;        &lt;/plugins&gt;    &lt;/build&gt;&lt;/project&gt;</code></pre><h2 id="application-yml"><a href="#application-yml" class="headerlink" title="application.yml"></a>application.yml</h2><pre><code>spring:  datasource:    driver-class-name: com.mysql.cj.jdbc.Driver    url: jdbc:mysql://localhost:3306/jdbc    username: root    password: root    type: com.alibaba.druid.pool.DruidDataSource    #   数据源其他配置    initialSize: 5    minIdle: 5    maxActive: 20    maxWait: 60000    timeBetweenEvictionRunsMillis: 60000    minEvictableIdleTimeMillis: 300000    validationQuery: SELECT 1 FROM DUAL    testWhileIdle: true    testOnBorrow: false    testOnReturn: false    poolPreparedStatements: true    #   配置监控统计拦截的filters，去掉后监控界面sql无法统计，&#39;wall&#39;用于防火墙    filters: stat,wall    maxPoolPreparedStatementPerConnectionSize: 20    useGlobalDataSourceStat: true    connectionProperties: druid.stat.mergeSql=true;druid.stat.slowSqlMillis=500</code></pre><h2 id="DruidConfig-java"><a href="#DruidConfig-java" class="headerlink" title="DruidConfig.java"></a>DruidConfig.java</h2><pre><code>package com.example.springboot.config;import com.alibaba.druid.pool.DruidDataSource;import com.alibaba.druid.support.http.StatViewServlet;import com.alibaba.druid.support.http.WebStatFilter;import org.springframework.boot.context.properties.ConfigurationProperties;import org.springframework.boot.web.servlet.FilterRegistrationBean;import org.springframework.boot.web.servlet.ServletRegistrationBean;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;import javax.sql.DataSource;import java.util.Arrays;import java.util.HashMap;import java.util.Map;/** * @author Yan * @date 2019/6/8 13:46 */@Configurationpublic class DruidConfig {    @ConfigurationProperties(prefix = &quot;spring.datasource&quot;)    @Bean    public DataSource druid(){        return  new DruidDataSource();    }    //配置Druid的监控    //1、配置一个管理后台的Servlet    @Bean    public ServletRegistrationBean statViewServlet(){        ServletRegistrationBean bean = new ServletRegistrationBean(new StatViewServlet(), &quot;/druid/*&quot;);        Map&lt;String,String&gt; initParams = new HashMap&lt;&gt;();        initParams.put(&quot;loginUsername&quot;,&quot;admin&quot;);        initParams.put(&quot;loginPassword&quot;,&quot;123456&quot;);        initParams.put(&quot;allow&quot;,&quot;&quot;);//默认就是允许所有访问        initParams.put(&quot;deny&quot;,&quot;192.168.15.21&quot;);  //拒绝哪些ip访问        bean.setInitParameters(initParams);        return bean;    }    //2、配置一个web监控的filter    @Bean    public FilterRegistrationBean webStatFilter(){        FilterRegistrationBean bean = new FilterRegistrationBean();        bean.setFilter(new WebStatFilter());        Map&lt;String,String&gt; initParams = new HashMap&lt;&gt;();        initParams.put(&quot;exclusions&quot;,&quot;*.js,*.css,/druid/*&quot;);        bean.setInitParameters(initParams);        bean.setUrlPatterns(Arrays.asList(&quot;/*&quot;));        return  bean;    }}</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Spring-Boot整合Druid&quot;&gt;&lt;a href=&quot;#Spring-Boot整合Druid&quot; class=&quot;headerlink&quot; title=&quot;Spring Boot整合Druid&quot;&gt;&lt;/a&gt;Spring Boot整合Druid&lt;/h1&gt;
    
    </summary>
    
      <category term="Spring Boot" scheme="http://yoursite.com/categories/Spring-Boot/"/>
    
      <category term="整合Druid" scheme="http://yoursite.com/categories/Spring-Boot/%E6%95%B4%E5%90%88Druid/"/>
    
    
      <category term="Spring Boot" scheme="http://yoursite.com/tags/Spring-Boot/"/>
    
      <category term="整合Druid" scheme="http://yoursite.com/tags/%E6%95%B4%E5%90%88Druid/"/>
    
  </entry>
  
  <entry>
    <title>Spring MVC和MyBatis开发环境准备</title>
    <link href="http://yoursite.com/1970/01/01/Spring%20MVC%E5%92%8CMyBatis%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E5%87%86%E5%A4%87/"/>
    <id>http://yoursite.com/1970/01/01/Spring MVC和MyBatis开发环境准备/</id>
    <published>1970-01-01T00:00:00.000Z</published>
    <updated>2019-05-26T10:51:54.221Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Spring-MVC和MyBatis开发环境准备"><a href="#Spring-MVC和MyBatis开发环境准备" class="headerlink" title="Spring MVC和MyBatis开发环境准备"></a>Spring MVC和MyBatis开发环境准备</h1><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><ol><li>jdk</li><li>Intellij IDEA</li><li>Tomcat</li><li>Maven</li><li>MySql<a id="more"></a></li></ol><h2 id="JDK-安装"><a href="#JDK-安装" class="headerlink" title="JDK 安装"></a>JDK 安装</h2><h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><p>JDK建议使用1.8及以上的版本。<br>官方下载路径：<a href="https://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html" target="_blank" rel="noopener">jdk下载路地址</a></p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>双击下载软件，一路单击下一步即可。     </p><h3 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h3><p><strong>Windows</strong>：右击【我的电脑】→【属性】→【高级系统设置】→【环境变量】→【系统变量】→【新建】，接着如下图所示：<br><img src="https://farm8.staticflickr.com/7873/40480682053_903c92b01b_b.jpg" alt="java_home"></p><p>在【系统变量】的path中添加 <strong>%JAVA_HOME%\bin</strong>。</p><p>验证，如下图所示：<br><img src="https://farm8.staticflickr.com/7860/40480681993_9a639b1dc2_b.jpg" alt="java"></p><h2 id="Intellij-IDEA"><a href="#Intellij-IDEA" class="headerlink" title="Intellij IDEA"></a>Intellij IDEA</h2><p>下载路径：<a href="https://www.jetbrains.com/idea/download/download-thanks.html?platform=windows" target="_blank" rel="noopener">indea U</a></p><h3 id="激活（针对学生的免费使用计划）"><a href="#激活（针对学生的免费使用计划）" class="headerlink" title="激活（针对学生的免费使用计划）"></a>激活（针对学生的免费使用计划）</h3><p>参考：<a href="https://blog.csdn.net/iemdm1110/article/details/53365881" target="_blank" rel="noopener">Intellij IDEA的下载和使用（针对学生的免费使用计划）</a></p><h2 id="Tomcat的安装与配置"><a href="#Tomcat的安装与配置" class="headerlink" title="Tomcat的安装与配置"></a>Tomcat的安装与配置</h2><h3 id="下载-1"><a href="#下载-1" class="headerlink" title="下载"></a>下载</h3><p>下载链接：<a href="https://www-us.apache.org/dist/tomcat/tomcat-8/v8.5.39/bin/apache-tomcat-8.5.39-windows-x64.zip" target="_blank" rel="noopener">Tomcat 8.0</a><br>其他版本可以查看该页面：<a href="https://tomcat.apache.org/download-80.cgi" target="_blank" rel="noopener">下载页面</a>     </p><p>下载完成后对文件进行解压，<strong>解压路径自行设置</strong>。</p><h3 id="Intellij-IDEA-配置-Tomcat"><a href="#Intellij-IDEA-配置-Tomcat" class="headerlink" title="Intellij IDEA 配置 Tomcat"></a>Intellij IDEA 配置 Tomcat</h3><p>步骤如下图：      </p><p><img src="https://farm8.staticflickr.com/7860/33570544738_4981576891_b.jpg" alt><br><img src="https://farm8.staticflickr.com/7818/33570544808_63d536cc3e_b.jpg" alt><br><img src="https://farm8.staticflickr.com/7896/40480762723_6bce0e2c84_b.jpg" alt><br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://farm8.staticflickr.com/7917/33570544928_cabdb4f7d0_b.jpg" alt title>                </div>                <div class="image-caption"></div>            </figure>      </p><h2 id="Maven-的安装和配置"><a href="#Maven-的安装和配置" class="headerlink" title="Maven 的安装和配置"></a>Maven 的安装和配置</h2><p>下载地址：<a href="https://maven.apache.org/download.cgi" target="_blank" rel="noopener">Maven</a>       </p><p><img src="https://farm8.staticflickr.com/7921/46730276854_36b53e43c4_b.jpg" alt="Maven">      </p><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><ol><li>在Maven的安装目录新建文件夹repository,用来作为本地仓库。</li><li>如下图：<br><img src="https://farm8.staticflickr.com/7899/47400537232_e6978ba63f_b.jpg" alt>       </li></ol><h2 id="MySql"><a href="#MySql" class="headerlink" title="MySql"></a>MySql</h2><p>参考：<a href="http://www.runoob.com/mysql/mysql-install.html" target="_blank" rel="noopener">MySQL 安装| 菜鸟教程</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Spring-MVC和MyBatis开发环境准备&quot;&gt;&lt;a href=&quot;#Spring-MVC和MyBatis开发环境准备&quot; class=&quot;headerlink&quot; title=&quot;Spring MVC和MyBatis开发环境准备&quot;&gt;&lt;/a&gt;Spring MVC和MyBatis开发环境准备&lt;/h1&gt;&lt;h2 id=&quot;准备&quot;&gt;&lt;a href=&quot;#准备&quot; class=&quot;headerlink&quot; title=&quot;准备&quot;&gt;&lt;/a&gt;准备&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;jdk&lt;/li&gt;
&lt;li&gt;Intellij IDEA&lt;/li&gt;
&lt;li&gt;Tomcat&lt;/li&gt;
&lt;li&gt;Maven&lt;/li&gt;
&lt;li&gt;MySql
    
    </summary>
    
      <category term="SSM" scheme="http://yoursite.com/categories/SSM/"/>
    
      <category term="开发环境准备" scheme="http://yoursite.com/categories/SSM/%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E5%87%86%E5%A4%87/"/>
    
    
      <category term="Spring MVC和MyBatis开发环境准备" scheme="http://yoursite.com/tags/Spring-MVC%E5%92%8CMyBatis%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E5%87%86%E5%A4%87/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu18.04 安装 Docker</title>
    <link href="http://yoursite.com/1970/01/01/Ubuntu18.04%20%E5%AE%89%E8%A3%85%20Docker/"/>
    <id>http://yoursite.com/1970/01/01/Ubuntu18.04 安装 Docker/</id>
    <published>1970-01-01T00:00:00.000Z</published>
    <updated>2019-08-12T05:02:48.233Z</updated>
    
    <content type="html"><![CDATA[<h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><h1 id="系统要求"><a href="#系统要求" class="headerlink" title="系统要求"></a>系统要求</h1><p>Docker CE 支持以下版本的 Ubuntu 操作系统：</p><ul><li>Artful 17.10(Docker CE 17.11 Edge)</li><li>Zesty 17.04</li><li>Xenial 16.04(LTS)</li><li>Trusty 14.04(LTS)</li></ul><p>推荐使用 LTS 版本的，在Ubuntu发行版中，LTS是长期支持版本，会更稳定。<br><a id="more"></a></p><h1 id="卸载旧版本"><a href="#卸载旧版本" class="headerlink" title="卸载旧版本"></a>卸载旧版本</h1><p>旧版本的 Docker 称为 docker 或者 docker-engine，使用以下命令卸载旧版本： </p><pre><code>sudo apt-get remove docker \               docker-engine \               docker.io</code></pre><h1 id="安装与验证"><a href="#安装与验证" class="headerlink" title="安装与验证"></a>安装与验证</h1><p>从 Ubuntu 14.04 开始，一部分内核模块移到了可选内核模块包 (linux-image-extra-*) ，以减少内核软件包的体积。正常安装的系统应该会包含可选内核模块包，而一些裁剪后的系统可能会将其精简掉。AUFS 内核驱动属于可选内核模块的一部分，作为推荐的 Docker 存储层驱动，一般建议安装可选内核模块包以使用 AUFS。    </p><p>如果系统没有安装可选内核模块的话，可以执行下面的命令来安装可选内核模块包：(操作均为普通用户下)     </p><pre><code>sudo apt-get updatesudo apt-get install \    linux-image-extra-$(uname -r) \    linux-image-extra-virtual</code></pre><p>Ubuntu 16.04 + 上的 Docker CE 默认使用 overlay2 存储层驱动,无需手动配置。    </p><h2 id="使用APT安装"><a href="#使用APT安装" class="headerlink" title="使用APT安装"></a>使用APT安装</h2><p>由于 apt 源使用 HTTPS 以确保软件下载过程中不被篡改。因此，我们首先需要添加使用 HTTPS 传输的软件包以及 CA 证书。      </p><pre><code>sudo apt-get updatesudo apt-get install \    apt-transport-https \    ca-certificates \    curl \    software-properties-common</code></pre><p>鉴于国内网络问题，强烈建议使用国内源，官方源请在注释中查看。<br>为了确认所下载软件包的合法性，需要添加软件源的 GPG 密钥。     </p><pre><code>(任选其一即可)curl -fsSL https://mirrors.ustc.edu.cn/docker-ce/linux/ubuntu/gpg | sudo apt-key add -官方源curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -</code></pre><p>然后，我们需要向 source.list 中添加 Docker 软件源     </p><pre><code>sudo add-apt-repository \    &quot;deb [arch=amd64] https://mirrors.ustc.edu.cn/docker-ce/linux/ubuntu \    $(lsb_release -cs) \    stable&quot;# 官方源# $ sudo add-apt-repository \#    &quot;deb [arch=amd64] https://download.docker.com/linux/ubuntu \#    $(lsb_release -cs) \#    stable&quot;</code></pre><h2 id="安装-Docker-CE"><a href="#安装-Docker-CE" class="headerlink" title="安装 Docker CE"></a>安装 Docker CE</h2><pre><code>sudo apt updatesudo apt install docker-ce</code></pre><h2 id="建立-docker-用户组"><a href="#建立-docker-用户组" class="headerlink" title="建立 docker 用户组"></a>建立 docker 用户组</h2><p>建立docker组:   </p><pre><code>sudo groupadd docker</code></pre><p>将当前用户加入docker组：    </p><pre><code>sudo usermod -aG docker $USER</code></pre><h2 id="更换国内Docker仓库"><a href="#更换国内Docker仓库" class="headerlink" title="更换国内Docker仓库"></a>更换国内Docker仓库</h2><p>创建文件：       </p><pre><code>sudo vim /etc/docker/daemon.json</code></pre><p>加入以下内容：     </p><pre><code>{  &quot;registry-mirrors&quot;: [    &quot;https://docker.mirrors.ustc.edu.cn&quot;  ]}</code></pre><p>然后重启系统。    </p><h2 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h2><p>输入以下命令：       </p><pre><code>docker run hello-world</code></pre><p>若输出以下内容则为成功。          </p><pre><code>Unable to find image &#39;hello-world:latest&#39; locallylatest: Pulling from library/hello-worldca4f61b1923c: Pull completeDigest: sha256:be0cd392e45be79ffeffa6b05338b98ebb16c87b255f48e297ec7f98e123905cStatus: Downloaded newer image for hello-world:latestHello from Docker!This message shows that your installation appears to be working correctly.To generate this message, Docker took the following steps: 1. The Docker client contacted the Docker daemon. 2. The Docker daemon pulled the &quot;hello-world&quot; image from the Docker Hub.    (amd64) 3. The Docker daemon created a new container from that image which runs the    executable that produces the output you are currently reading. 4. The Docker daemon streamed that output to the Docker client, which sent it    to your terminal.To try something more ambitious, you can run an Ubuntu container with: $ docker run -it ubuntu bashShare images, automate workflows, and more with a free Docker ID: https://cloud.docker.com/For more examples and ideas, visit: https://docs.docker.com/engine/userguide/</code></pre><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://blog.codingfanlt.xyz/2018/10/17/Ubuntu-%E4%B8%8B%E5%AE%89%E8%A3%85-Docker/#more" target="_blank" rel="noopener">Ubuntu 下安装 Docker</a><br><a href="https://yeasy.gitbooks.io/docker_practice/install/ubuntu.html" target="_blank" rel="noopener">Docker —— 从入门到实践</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;准备工作&quot;&gt;&lt;a href=&quot;#准备工作&quot; class=&quot;headerlink&quot; title=&quot;准备工作&quot;&gt;&lt;/a&gt;准备工作&lt;/h1&gt;&lt;h1 id=&quot;系统要求&quot;&gt;&lt;a href=&quot;#系统要求&quot; class=&quot;headerlink&quot; title=&quot;系统要求&quot;&gt;&lt;/a&gt;系统要求&lt;/h1&gt;&lt;p&gt;Docker CE 支持以下版本的 Ubuntu 操作系统：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Artful 17.10(Docker CE 17.11 Edge)&lt;/li&gt;
&lt;li&gt;Zesty 17.04&lt;/li&gt;
&lt;li&gt;Xenial 16.04(LTS)&lt;/li&gt;
&lt;li&gt;Trusty 14.04(LTS)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;推荐使用 LTS 版本的，在Ubuntu发行版中，LTS是长期支持版本，会更稳定。&lt;br&gt;
    
    </summary>
    
      <category term="Docker" scheme="http://yoursite.com/categories/Docker/"/>
    
      <category term="安装" scheme="http://yoursite.com/categories/Docker/%E5%AE%89%E8%A3%85/"/>
    
    
      <category term="Docker安装" scheme="http://yoursite.com/tags/Docker%E5%AE%89%E8%A3%85/"/>
    
  </entry>
  
  <entry>
    <title>Android studio安装</title>
    <link href="http://yoursite.com/1970/01/01/Android%20studio%E5%AE%89%E8%A3%85/"/>
    <id>http://yoursite.com/1970/01/01/Android studio安装/</id>
    <published>1970-01-01T00:00:00.000Z</published>
    <updated>2018-11-07T09:47:10.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h1><p> 1.配置环境变量<br> 2.安装<br> 3.创建HelloWorld<br><a id="more"></a> </p><h1 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h1><blockquote><p>为什么首先要配置环境变量呢？配置环境变量可以防止之后Android studio安装SDK时安装到默认位置，减少C盘的占用空间。   </p></blockquote><blockquote><p>新建 变量名 <strong>ANDROID_HOME</strong> ，值为 <strong>自己创建的放置SDK的路径</strong>  </p></blockquote><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><blockquote><p>首先下载 <a href="https://developer.android.com/studio/" target="_blank" rel="noopener">Android studio</a> &gt;下载完成直接打开。  </p></blockquote><p><img src="https://farm5.staticflickr.com/4880/31841109308_a313d85517.jpg" alt>  </p><p><img src="https://farm5.staticflickr.com/4850/44988271314_bce2619ccd.jpg" alt>  </p><p><img src="https://farm2.staticflickr.com/1924/31841108958_71159909a5.jpg" alt>  </p><p><img src="https://farm2.staticflickr.com/1978/44988271084_080a359272.jpg" alt>  </p><blockquote><p>如果不想安装到C盘也可以选择其他的。  </p></blockquote><p><img src="https://farm2.staticflickr.com/1979/44988270794_180a75c45c.jpg" alt>  </p><p><img src="https://farm5.staticflickr.com/4817/31841108368_b1d91b3f89.jpg" alt>  </p><blockquote><p>等待一段时间。  </p></blockquote><p><img src="https://farm5.staticflickr.com/4809/31841108118_9edc0bcdb4.jpg" alt>  </p><p><img src="https://farm2.staticflickr.com/1954/44988270384_d49952b74c.jpg" alt>  </p><p><img src="https://farm5.staticflickr.com/4884/45713614351_f3d9beab30.jpg" alt>  </p><p><img src="https://farm2.staticflickr.com/1948/44989011554_572e559b9c.jpg" alt>  </p><blockquote><p>点击 cancle  </p></blockquote><p><img src="https://farm5.staticflickr.com/4868/45662348002_c066024b41.jpg" alt>  </p><p><img src="https://farm5.staticflickr.com/4848/31841107568_1bafdb8257.jpg" alt>  </p><p><img src="https://farm2.staticflickr.com/1935/31841107508_42dd0db9fd.jpg" alt>  </p><blockquote><p>选择喜欢的主题  </p></blockquote><p><img src="https://farm5.staticflickr.com/4904/30773437437_5195c8b96d.jpg" alt>  </p><p><img src="https://farm5.staticflickr.com/4911/45713738121_8d9af38424.jpg" alt>  </p><blockquote><p>之后就是漫长的等待…  </p></blockquote><p><img src="https://farm2.staticflickr.com/1918/44989226494_82e0de973b.jpg" alt>  </p><blockquote><p>等待总会有结果的。  </p></blockquote><h1 id="创建第一个-Android-程序-HelloWorld"><a href="#创建第一个-Android-程序-HelloWorld" class="headerlink" title="创建第一个 Android 程序 HelloWorld"></a>创建第一个 Android 程序 HelloWorld</h1><blockquote><p>点击上图中的 <strong>Start a new Android Studio project</strong>    </p></blockquote><p><img src="https://farm5.staticflickr.com/4912/31841106718_6aac7eb41e.jpg" alt>  </p><blockquote><p>Application name 填写 HelloWorld<br>Company domain 按照系统默认的就行<br>Project location 存放自己代码的位置，可自定义。  </p></blockquote><p><img src="https://farm5.staticflickr.com/4806/31841110248_4c7903f740.jpg" alt>  </p><blockquote><p>系统默认即可  </p></blockquote><p><img src="https://farm2.staticflickr.com/1931/45662349702_1f0e2483a3.jpg" alt>  </p><blockquote><p>一般选择 Empty Activity  </p></blockquote><p><img src="https://farm5.staticflickr.com/4811/45663495252_64a02fef07.jpg" alt>  </p><p><img src="https://farm2.staticflickr.com/1913/31842430028_f9b5f10a7f.jpg" alt>  </p><blockquote><p>点击 Finish。  </p></blockquote><p><img src="https://farm2.staticflickr.com/1901/45663624032_36c485e140.jpg" alt>  </p><blockquote><p>等待红线部分加载完毕。<br>加载完成后点击工具栏-Bulid—Bulid Bundle(s)/APK(s)-Bulid APK(s)。<br>之后可以选择自己手机运行自己的程序。也可以选择下图中的自行安装模拟器运行。  </p></blockquote><p><img src="https://farm5.staticflickr.com/4883/45714458841_ecc2e7eff2.jpg" alt>  </p><blockquote><p>之后再补充…</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;准备&quot;&gt;&lt;a href=&quot;#准备&quot; class=&quot;headerlink&quot; title=&quot;准备&quot;&gt;&lt;/a&gt;准备&lt;/h1&gt;&lt;p&gt; 1.配置环境变量&lt;br&gt; 2.安装&lt;br&gt; 3.创建HelloWorld&lt;br&gt;
    
    </summary>
    
      <category term="Android" scheme="http://yoursite.com/categories/Android/"/>
    
      <category term="Android studio安装" scheme="http://yoursite.com/categories/Android/Android-studio%E5%AE%89%E8%A3%85/"/>
    
    
      <category term="Android" scheme="http://yoursite.com/tags/Android/"/>
    
      <category term="Android studio安装" scheme="http://yoursite.com/tags/Android-studio%E5%AE%89%E8%A3%85/"/>
    
  </entry>
  
  <entry>
    <title>bugzilla</title>
    <link href="http://yoursite.com/1970/01/01/buzilla/"/>
    <id>http://yoursite.com/1970/01/01/buzilla/</id>
    <published>1970-01-01T00:00:00.000Z</published>
    <updated>2019-05-22T11:11:34.904Z</updated>
    
    <content type="html"><![CDATA[<h1 id="bugzilla"><a href="#bugzilla" class="headerlink" title="bugzilla"></a>bugzilla</h1><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><ul><li>系统：Windows 7</li><li>MySql 5.5.62及以上</li><li>Bugzilla 4.2及以上</li><li>ActivePerl 5.24.3.2404及以上</li><li>XAMPP 7.1.29及以上</li></ul><a id="more"></a><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><h3 id="MySql-5-5-62"><a href="#MySql-5-5-62" class="headerlink" title="MySql 5.5.62"></a>MySql 5.5.62</h3><p>下载地址：<a href="https://dev.mysql.com/downloads/mysql/5.5.html#downloads" target="_blank" rel="noopener">MySql 5.5.62</a></p><h3 id="Bugzilla-4-2"><a href="#Bugzilla-4-2" class="headerlink" title="Bugzilla 4.2"></a>Bugzilla 4.2</h3><p>下载地址：<a href="https://ftp.mozilla.org/pub/webtools/bugzilla-4.2.tar.gz" target="_blank" rel="noopener">Bugzilla 4.2</a></p><h3 id="ActivePerl-5-24-3-2404"><a href="#ActivePerl-5-24-3-2404" class="headerlink" title="ActivePerl 5.24.3.2404"></a>ActivePerl 5.24.3.2404</h3><p>下载地址：<a href="https://www.activestate.com/products/activeperl/downloads/" target="_blank" rel="noopener">ActivePerl 5.24.3.2404</a></p><h3 id="XAMPP-7-1-29"><a href="#XAMPP-7-1-29" class="headerlink" title="XAMPP 7.1.29"></a>XAMPP 7.1.29</h3><p>下载地址：<a href="https://www.apachefriends.org/download.html" target="_blank" rel="noopener">XAMPP 7.1.29</a></p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="XAMPP-7-1-29-1"><a href="#XAMPP-7-1-29-1" class="headerlink" title="XAMPP 7.1.29"></a>XAMPP 7.1.29</h3><p>参考：<a href="https://www.jianshu.com/p/07455416d68c" target="_blank" rel="noopener">https://www.jianshu.com/p/07455416d68c</a></p><h3 id="ActivePerl-5-24-3-2404-1"><a href="#ActivePerl-5-24-3-2404-1" class="headerlink" title="ActivePerl 5.24.3.2404"></a>ActivePerl 5.24.3.2404</h3><p>双击activeperl安装界面，一直点击next直至完成安装，activeperl的选项都是默认的选项，依照默认安装即可。</p><h4 id="验证perl是否安装成功"><a href="#验证perl是否安装成功" class="headerlink" title="验证perl是否安装成功"></a>验证perl是否安装成功</h4><p>cmd界面运行<strong>perl -v</strong>，出现版本号即为成功。如下图：    </p><p><img src="https://live.staticflickr.com/65535/40940491033_0b3dac7c9f_b.jpg" alt></p><h3 id="MySql-5-5-62-1"><a href="#MySql-5-5-62-1" class="headerlink" title="MySql 5.5.62"></a>MySql 5.5.62</h3><p>步骤大致如下图： </p><p><img src="https://live.staticflickr.com/65535/47117642934_fef9da14e6_z.jpg" alt><br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://live.staticflickr.com/65535/47117642834_8c20beedbf_z.jpg" alt title>                </div>                <div class="image-caption"></div>            </figure><br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://live.staticflickr.com/65535/47117642764_564ef76a68_z.jpg" alt title>                </div>                <div class="image-caption"></div>            </figure></p><blockquote><p>路径设置为C:\MySql,因为Bugzilla默认的引导路径为这个。     </p></blockquote><p><img src="https://live.staticflickr.com/65535/47907048741_9349a4e15a_z.jpg" alt><br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://live.staticflickr.com/65535/47117642614_347352b99d_z.jpg" alt title>                </div>                <div class="image-caption"></div>            </figure><br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://live.staticflickr.com/65535/47117642474_2a54e37d2f_z.jpg" alt title>                </div>                <div class="image-caption"></div>            </figure><br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://live.staticflickr.com/65535/47907048551_eec71b24f2_z.jpg" alt title>                </div>                <div class="image-caption"></div>            </figure><br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://live.staticflickr.com/65535/47117642404_577dd1d32a_z.jpg>" alt title>                </div>                <div class="image-caption"></div>            </figure><br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://live.staticflickr.com/65535/47117642284_eb87f8f7eb_z.jpg" alt title>                </div>                <div class="image-caption"></div>            </figure><br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://live.staticflickr.com/65535/47907048381_230a345191_z.jpg" alt title>                </div>                <div class="image-caption"></div>            </figure><br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://live.staticflickr.com/65535/47117642164_c71ac592c3_z.jpg" alt title>                </div>                <div class="image-caption"></div>            </figure><br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://live.staticflickr.com/65535/47907048241_10bd0de817_z.jpg" alt title>                </div>                <div class="image-caption"></div>            </figure></p><h3 id="Bugzilla-4-2-1"><a href="#Bugzilla-4-2-1" class="headerlink" title="Bugzilla 4.2"></a>Bugzilla 4.2</h3><ol><li><p>解压Bugzilla 4.2文件，将解压后的内容复制到<strong>C:\xampp\htdocs\bugzilla</strong>文件夹下，若没有则先建一个文件夹。</p></li><li><p><strong>win+R</strong> 打开cmd窗口，同时进入到<strong>C:\xampp\htdocs\bugzilla</strong>目录下。</p></li><li><p>输入<strong>checksetup.pl</strong>命令。如下图：</p></li></ol><p><img src="https://live.staticflickr.com/65535/40940574983_098091655f_z.jpg" alt></p><ol start="4"><li>安装perl模块，使用<strong>perl install XXX</strong>进行安装未安装的perl模块。如下图所示：</li></ol><p><img src="https://live.staticflickr.com/65535/40940617093_0cc2a753d9_z.jpg" alt></p><ol start="5"><li>可能会有一些模块无法安装，可以直接忽略。再次运行<strong>checksetup.pl</strong>命令，可能会需要安装<strong>DDB-MySql</strong>这个模块，安装之后再次运行<strong>checksetup.pl</strong>命令，出现下图则未成功。</li></ol><p><img src="https://live.staticflickr.com/65535/47907130061_c0ef1708fa_z.jpg" alt></p><ol start="6"><li><p>编辑<strong>C:\xampp\htdocs\bugzilla</strong>下的<strong>localconfig</strong>文件。</p></li><li><p>打开localconfig文件，将其中的$db_port = 0;改为$db_port = 3306; $index_html = 0;改为$index_html = 1。</p></li><li><p>打开<strong>MySQL 5.5 Command Line Client</strong>。<br>下面在MySQL服务器中创建一个bugs数据库，和一个bugs用户，以及为该用户授予相应的权限，命令如下：<br>create database bugs;                   创建一个数据库bugs<br>create user bugs@localhost;              创建一个用户bugs<br>grant all on bugs.* to bugs@’localhost’;     为用户bugs授权<br>flush privileges;                         刷新用户权限</p></li><li><p>在命令行下再次运行checksetup.pl将会生成和数据库有关的数据表。<br><strong>但是可能会出现报错，显示的是无法找到什么什么的表，这时候只需要把上一步创建的数据库bugs删除再重新创建即可，若无法解决自行查找资料</strong>。<br>生成数据表后会要求填入主机的地址服务器地址，<br>管理员名字和账号（该账号是一个email地址）以及管理员登陆的密码。（自由发挥）</p></li><li><p>将<strong>C:\xampp\htdocs\bugzilla</strong>下的后缀名为.cgi的文件中的 <strong>#!/usr/bin/perl</strong> 改为<strong>#!”C:\Perl64\bin\perl.exe”</strong>。</p></li></ol><h2 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h2><p>打开XAMPP界面的Apache,在浏览器中输入<strong><a href="http://localhost/bugzilla" target="_blank" rel="noopener">http://localhost/bugzilla</a></strong>。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;bugzilla&quot;&gt;&lt;a href=&quot;#bugzilla&quot; class=&quot;headerlink&quot; title=&quot;bugzilla&quot;&gt;&lt;/a&gt;bugzilla&lt;/h1&gt;&lt;h2 id=&quot;准备&quot;&gt;&lt;a href=&quot;#准备&quot; class=&quot;headerlink&quot; title=&quot;准备&quot;&gt;&lt;/a&gt;准备&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;系统：Windows 7&lt;/li&gt;
&lt;li&gt;MySql 5.5.62及以上&lt;/li&gt;
&lt;li&gt;Bugzilla 4.2及以上&lt;/li&gt;
&lt;li&gt;ActivePerl 5.24.3.2404及以上&lt;/li&gt;
&lt;li&gt;XAMPP 7.1.29及以上&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="软件缺陷" scheme="http://yoursite.com/categories/%E8%BD%AF%E4%BB%B6%E7%BC%BA%E9%99%B7/"/>
    
      <category term="bugzilla" scheme="http://yoursite.com/categories/%E8%BD%AF%E4%BB%B6%E7%BC%BA%E9%99%B7/bugzilla/"/>
    
    
      <category term="软件缺陷" scheme="http://yoursite.com/tags/%E8%BD%AF%E4%BB%B6%E7%BC%BA%E9%99%B7/"/>
    
      <category term="bugzilla" scheme="http://yoursite.com/tags/bugzilla/"/>
    
  </entry>
  
  <entry>
    <title>deepin</title>
    <link href="http://yoursite.com/1970/01/01/deepin/"/>
    <id>http://yoursite.com/1970/01/01/deepin/</id>
    <published>1970-01-01T00:00:00.000Z</published>
    <updated>2019-03-21T04:16:23.111Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Deepin"><a href="#Deepin" class="headerlink" title="Deepin"></a>Deepin</h1><h2 id="无线网络极慢的解决方案"><a href="#无线网络极慢的解决方案" class="headerlink" title="无线网络极慢的解决方案"></a>无线网络极慢的解决方案</h2><p>初次安装，出现无线网络网速极慢的状况。<br><a id="more"></a></p><h3 id="更改文件参数"><a href="#更改文件参数" class="headerlink" title="更改文件参数"></a>更改文件参数</h3><pre><code>vim /etc/modprobe.d/iwlwifi.conf</code></pre><p>将该文件中的11n_disable=1改为11n_disable=8     </p><h3 id="驱动安装"><a href="#驱动安装" class="headerlink" title="驱动安装"></a>驱动安装</h3><h4 id="查看驱动型号"><a href="#查看驱动型号" class="headerlink" title="查看驱动型号"></a>查看驱动型号</h4><p>输入以下命令      </p><pre><code>lspci|grep Wireless</code></pre><p>例如下图中的型号：<br><img src="https://farm8.staticflickr.com/7910/32392733287_18cb0bd927_b.jpg" alt></p><p>型号为：Intel Corporation Intel Dual Band Wireless-AC 3165 Plus Bluetooth (rev 99)     </p><h4 id="下载相对应的驱动"><a href="#下载相对应的驱动" class="headerlink" title="下载相对应的驱动"></a>下载相对应的驱动</h4><p>下载地址：<a href="https://www.intel.cn/content/www/cn/zh/support/articles/000005511/network-and-i-o/wireless-networking.html" target="_blank" rel="noopener">英特尔® 无线适配器的 Linux* 支持</a><br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://farm8.staticflickr.com/7857/33458876818_c016c3cc9d_b.jpg" alt title>                </div>                <div class="image-caption"></div>            </figure></p><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p>输入以下命令：     </p><pre><code>tar -zxvf iwlwifi-7265-ucode-25.30.14.0.tgzsudo cp iwlwifi-*.ucode /lib/firmwaresudo reboot</code></pre><p>一般情况下是可以解决该问题的。     </p><h2 id="electorn-ssr"><a href="#electorn-ssr" class="headerlink" title="electorn-ssr"></a>electorn-ssr</h2><h3 id="下载地址"><a href="#下载地址" class="headerlink" title="下载地址"></a>下载地址</h3><p>下载地址：<a href="https://github.com/erguotou520/electron-ssr/releases/download/v0.2.6/electron-ssr-0.2.6.deb" target="_blank" rel="noopener">electron-ssr</a><br>也可以根据喜好自己下载：<a href="https://github.com/erguotou520/electron-ssr/releases" target="_blank" rel="noopener">列表</a>       </p><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>一般情况下安装后是无法使用electron-ssr的，需要进行配置。<br>如图（二选一即可）：<br><img src="https://farm8.staticflickr.com/7923/40369635983_05eb970b70_b.jpg" alt></p><p><img src="https://farm8.staticflickr.com/7897/47334882911_1e4ab7fdbb_b.jpg" alt> </p><h2 id="node-js安装"><a href="#node-js安装" class="headerlink" title="node.js安装"></a>node.js安装</h2><p>主要讲两个方式：     </p><h3 id="第一种方式"><a href="#第一种方式" class="headerlink" title="第一种方式"></a>第一种方式</h3><h4 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h4><p>下载地址：<a href="https://nodejs.org/en/" target="_blank" rel="noopener">node.js</a><br>根据个人习惯进行下载。     </p><h4 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h4><p>输入以下命令：     </p><pre><code>tar xvJf node-v10.15.3-linux-x64.tar.xz    //解压cd node-v10.15.3-linux-x64/bin/./node -v</code></pre><h4 id="设置全局"><a href="#设置全局" class="headerlink" title="设置全局"></a>设置全局</h4><pre><code>ln -s /home/kun/mysofltware/node-v0.10.28-linux-x64/bin/node /usr/local/bin/nodeln -s /home/kun/mysofltware/node-v0.10.28-linux-x64/bin/npm /usr/local/bin/npm# /home/kun/mysofltware/node-v0.10.28-linux-x64/bin/node为自己存放文件的地址   /usr/local/bin/npm和/usr/local/bin/node不需要更改</code></pre><h3 id="第二种方式"><a href="#第二种方式" class="headerlink" title="第二种方式"></a>第二种方式</h3><p>通过命令进行安装，输入以下命令：    </p><pre><code>sudo apt-get install nodejssudo apt-get install npm</code></pre><h2 id="配置Clion"><a href="#配置Clion" class="headerlink" title="配置Clion"></a>配置Clion</h2><h3 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h3><pre><code>sudo apt update</code></pre><h3 id="gcc、g"><a href="#gcc、g" class="headerlink" title="gcc、g++"></a>gcc、g++</h3><pre><code>sudo apt-get install build-essentialsudo apt-get install g++</code></pre><p>设置环境变量    </p><pre><code>sudo vim /etc/profile## 将以下内容填写进去 export CC=/usr/bin/gccexport CXX=/usr/bin/g++</code></pre><p>验证是否安装成功     </p><pre><code>gcc --versiong++ --version</code></pre><h3 id="cmake"><a href="#cmake" class="headerlink" title="cmake"></a>cmake</h3><h4 id="下载-1"><a href="#下载-1" class="headerlink" title="下载"></a>下载</h4><p>下载列表：<a href="https://cmake.org/files/v3.11/" target="_blank" rel="noopener">cmake</a><br>下载地址:[cmake-3.11.3.tar.gz]<a href="https://cmake.org/files/v3.11/cmake-3.11.3.tar.gz" target="_blank" rel="noopener">https://cmake.org/files/v3.11/cmake-3.11.3.tar.gz</a></p><h4 id="安装-2"><a href="#安装-2" class="headerlink" title="安装"></a>安装</h4><p>新建一个“cmake”目录     </p><pre><code>cd /homemkdir Cmake</code></pre><p>解压      </p><pre><code>cd /home/Cmaketar -xzvf cmake-3.11.3.tar.gz </code></pre><p>进入cmake 目录</p><pre><code>cd cmake-3.11.3</code></pre><p>编译安装</p><pre><code>### 最好使用root用户./bootstrap &amp;&amp; make &amp;&amp; make install</code></pre><p>验证是否安装成功      </p><pre><code>cmake -version</code></pre><h3 id="配置Clion-1"><a href="#配置Clion-1" class="headerlink" title="配置Clion"></a>配置Clion</h3><p>如图所示：     </p><p><img src="https://farm8.staticflickr.com/7810/47335052501_6da8fb6517_b.jpg" alt></p><h2 id="deepin下idea中文异常"><a href="#deepin下idea中文异常" class="headerlink" title="deepin下idea中文异常"></a>deepin下idea中文异常</h2><p>输入以下命令</p><pre><code>supasswdaptitude search uming</code></pre><pre><code>aptitude install fonts-arphic-uming</code></pre><p>之后重新启动idea（Netbeans也适用）</p><h2 id="安装-Docker"><a href="#安装-Docker" class="headerlink" title="安装 Docker"></a>安装 Docker</h2><p>参考链接：<a href="https://wiki.deepin.org/wiki/Docker" target="_blank" rel="noopener">deepin安装Docker</a>     </p><h2 id="Android-Studio-dev-kvm-device-permission-denied"><a href="#Android-Studio-dev-kvm-device-permission-denied" class="headerlink" title="Android Studio: /dev/kvm device permission denied"></a>Android Studio: /dev/kvm device permission denied</h2><h3 id="安装-qemu-kvm"><a href="#安装-qemu-kvm" class="headerlink" title="安装 qemu-kvm"></a>安装 qemu-kvm</h3><p>输入以下命令：    </p><pre><code>sudo apt install qemu-kvm</code></pre><h3 id="检查-dev-kvm-使用的所有权"><a href="#检查-dev-kvm-使用的所有权" class="headerlink" title="检查/dev/kvm 使用的所有权"></a>检查/dev/kvm 使用的所有权</h3><p>输入以下命令：     </p><pre><code>ls -al /dev/kvm</code></pre><p>结果为：     </p><pre><code>crw-rw---- 1 root kvm 10, 232 3月  11 10:36 /dev/kvm</code></pre><p>检查组中的用户kvm，使用：    </p><pre><code>grep kvm /etc/group</code></pre><p>添加用户到kvm中，请使用：     </p><pre><code>sudo adduser yourname kvm</code></pre><p>再检查</p><pre><code>grep kvm /etc/group</code></pre><p>最后重启或注销。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Deepin&quot;&gt;&lt;a href=&quot;#Deepin&quot; class=&quot;headerlink&quot; title=&quot;Deepin&quot;&gt;&lt;/a&gt;Deepin&lt;/h1&gt;&lt;h2 id=&quot;无线网络极慢的解决方案&quot;&gt;&lt;a href=&quot;#无线网络极慢的解决方案&quot; class=&quot;headerlink&quot; title=&quot;无线网络极慢的解决方案&quot;&gt;&lt;/a&gt;无线网络极慢的解决方案&lt;/h2&gt;&lt;p&gt;初次安装，出现无线网络网速极慢的状况。&lt;br&gt;
    
    </summary>
    
      <category term="deepin" scheme="http://yoursite.com/categories/deepin/"/>
    
      <category term="配置" scheme="http://yoursite.com/categories/deepin/%E9%85%8D%E7%BD%AE/"/>
    
    
      <category term="deepin" scheme="http://yoursite.com/tags/deepin/"/>
    
  </entry>
  
  <entry>
    <title>BugFree安装</title>
    <link href="http://yoursite.com/1970/01/01/BugFree/"/>
    <id>http://yoursite.com/1970/01/01/BugFree/</id>
    <published>1970-01-01T00:00:00.000Z</published>
    <updated>2019-04-22T14:06:59.994Z</updated>
    
    <content type="html"><![CDATA[<h1 id="BugFree"><a href="#BugFree" class="headerlink" title="BugFree"></a>BugFree</h1><p>准备工作：（Windows环境下）     </p><ul><li>XAMPP 版本在5.x.x</li><li>bugfree_v3.0.1</li></ul><p>不要用最新版本的XAMPP，切记。</p><a id="more"></a><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p><a href="https://sourceforge.net/projects/xampp/files/XAMPP%20Windows/5.6.3/" target="_blank" rel="noopener">XAMPP</a></p><p><a href="https://pan.baidu.com/s/1EL3arDsErowwZwVmaLOELg" target="_blank" rel="noopener">bugfree</a>提取码: ff5d</p><h2 id="XAMPP-安装"><a href="#XAMPP-安装" class="headerlink" title="XAMPP 安装"></a>XAMPP 安装</h2><p>双击exe文件傻瓜式安装。</p><h2 id="安装-bugfree"><a href="#安装-bugfree" class="headerlink" title="安装 bugfree"></a>安装 bugfree</h2><p>1.在上一步安装XAMPP时路径C:\xampp\htdocs\下新建文件夹bugfree,将下载bugfree文件解压后的内容复制进去。同时在新建一个BugFile文件夹，用于下一步操作。<br>2.打开XAMPP主界面上的前两个start按钮。<br>3.打开浏览器输入<strong>localhost/bugfree</strong>,如下图：</p><p><img src="https://live.staticflickr.com/65535/32724966557_8b3eea5b47.jpg" alt></p><p>4.上图中的全部为绿色的勾勾仅为成功。然后点击继续。<br>5.按照下图中进行配置。</p><p><img src="https://live.staticflickr.com/65535/47667749761_72c60cc17b.jpg" alt></p><p>6.然后修改C:\xampp\htdocs\bugfree\protected\config中的<strong>main.php</strong>。全部替换即可。</p><pre><code>&lt;?phpreturn array (  &#39;basePath&#39; =&gt; &#39;C:\\xampp\\htdocs\\bugfree\\protected\\config\\..&#39;,  &#39;name&#39; =&gt; &#39;BugFree 3.0.1&#39;,  &#39;preload&#39; =&gt;   array (    0 =&gt; &#39;log&#39;,  ),  &#39;language&#39; =&gt; &#39;zh_cn&#39;,  &#39;theme&#39; =&gt; &#39;classic&#39;,  &#39;defaultController&#39; =&gt; &#39;site&#39;,  &#39;timeZone&#39; =&gt; &#39;Asia/Shanghai&#39;,  &#39;import&#39; =&gt;   array (    0 =&gt; &#39;application.models.*&#39;,    1 =&gt; &#39;application.components.*&#39;,    2 =&gt; &#39;application.service.*&#39;,  ),  &#39;modules&#39; =&gt;   array (    &#39;gii&#39; =&gt;     array (      &#39;class&#39; =&gt; &#39;system.gii.GiiModule&#39;,      &#39;password&#39; =&gt; &#39;123456&#39;,      &#39;ipFilters&#39; =&gt;       array (        0 =&gt; &#39;127.0.0.1&#39;,        1 =&gt; &#39;::1&#39;,      ),    ),  ),  &#39;components&#39; =&gt;   array (    &#39;user&#39; =&gt;     array (      &#39;allowAutoLogin&#39; =&gt; true,    ),    &#39;request&#39; =&gt;     array (      &#39;enableCookieValidation&#39; =&gt; true,    ),    &#39;cache&#39; =&gt;     array (      &#39;class&#39; =&gt; &#39;CDbCache&#39;,      &#39;connectionID&#39; =&gt; &#39;db&#39;,    ),    &#39;db&#39; =&gt;     array (      &#39;pdoClass&#39; =&gt; &#39;NestedPDO&#39;,      &#39;connectionString&#39; =&gt; &#39;mysql:host=localhost;dbname=bugfree;port=3306&#39;,      &#39;emulatePrepare&#39; =&gt; true,      &#39;username&#39; =&gt; &#39;root&#39;,      &#39;password&#39; =&gt; &#39;&#39;,      &#39;charset&#39; =&gt; &#39;utf8&#39;,      &#39;tablePrefix&#39; =&gt; &#39;bf_&#39;,    ),    &#39;errorHandler&#39; =&gt;     array (      &#39;errorAction&#39; =&gt; &#39;site/error&#39;,    ),    &#39;log&#39; =&gt;     array (      &#39;class&#39; =&gt; &#39;CLogRouter&#39;,      &#39;routes&#39; =&gt;       array (        0 =&gt;         array (          &#39;class&#39; =&gt; &#39;CFileLogRoute&#39;,          &#39;levels&#39; =&gt; &#39;info, error, warning&#39;,          &#39;categories&#39; =&gt; &#39;bugfree.*&#39;,        ),      ),    ),  ),  &#39;params&#39; =&gt;   array (    &#39;uploadPath&#39; =&gt; &#39;../BugFile&#39;,    &#39;picPreviewApp&#39; =&gt; &#39;http://::1/BugFile&#39;,    &#39;allUserGroupId&#39; =&gt; 1,    &#39;ldap&#39; =&gt;     array (      &#39;host&#39; =&gt; &#39;&#39;,      &#39;port&#39; =&gt; &#39;&#39;,      &#39;base&#39; =&gt; &#39;&#39;,      &#39;user&#39; =&gt; &#39;&#39;,      &#39;pass&#39; =&gt; &#39;&#39;,    ),    &#39;mail&#39; =&gt;     array (      &#39;on&#39; =&gt; &#39;1&#39;,      &#39;from_address&#39; =&gt; &#39;bugfree-noreply@test.com&#39;,      &#39;from_name&#39; =&gt; &#39;BugFree&#39;,      &#39;send_method&#39; =&gt; &#39;SMTP&#39;,      &#39;send_params&#39; =&gt;       array (        &#39;host&#39; =&gt; &#39;&#39;,        &#39;smtp_auth&#39; =&gt; false,        &#39;username&#39; =&gt; &#39;&#39;,        &#39;password&#39; =&gt; &#39;&#39;,      ),    ),  ),)?&gt;</code></pre><p>7.刷新之后就会出现登录界面。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;BugFree&quot;&gt;&lt;a href=&quot;#BugFree&quot; class=&quot;headerlink&quot; title=&quot;BugFree&quot;&gt;&lt;/a&gt;BugFree&lt;/h1&gt;&lt;p&gt;准备工作：（Windows环境下）     &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;XAMPP 版本在5.x.x&lt;/li&gt;
&lt;li&gt;bugfree_v3.0.1&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;不要用最新版本的XAMPP，切记。&lt;/p&gt;
    
    </summary>
    
      <category term="软件缺陷" scheme="http://yoursite.com/categories/%E8%BD%AF%E4%BB%B6%E7%BC%BA%E9%99%B7/"/>
    
      <category term="BugFree" scheme="http://yoursite.com/categories/%E8%BD%AF%E4%BB%B6%E7%BC%BA%E9%99%B7/BugFree/"/>
    
    
      <category term="软件缺陷" scheme="http://yoursite.com/tags/%E8%BD%AF%E4%BB%B6%E7%BC%BA%E9%99%B7/"/>
    
      <category term="BugFree" scheme="http://yoursite.com/tags/BugFree/"/>
    
  </entry>
  
  <entry>
    <title>hexo-theme-indigo</title>
    <link href="http://yoursite.com/1970/01/01/hexo-theme-indigo/"/>
    <id>http://yoursite.com/1970/01/01/hexo-theme-indigo/</id>
    <published>1970-01-01T00:00:00.000Z</published>
    <updated>2019-04-16T14:29:05.240Z</updated>
    
    <content type="html"><![CDATA[<h1 id="hexo-theme-indigo-主题"><a href="#hexo-theme-indigo-主题" class="headerlink" title="hexo-theme-indigo 主题"></a>hexo-theme-indigo 主题</h1><p>demo<br><img src="https://live.staticflickr.com/65535/47569038422_0c51df8041.jpg" alt="hexo-theme-indigo"></p><a id="more"></a><h2 id="主题安装"><a href="#主题安装" class="headerlink" title="主题安装"></a>主题安装</h2><p>安装需确认Hexo版本在 3.0 以上，以及Node版本在6.x以上，在Hexo根目录，执行以下命令：     </p><pre><code>git clone git@github.com:yscoder/hexo-theme-indigo.git themes/indigo</code></pre><h2 id="切换主题"><a href="#切换主题" class="headerlink" title="切换主题"></a>切换主题</h2><p>在Hexo根目录下的_config.yml文件中修改，如下：     </p><pre><code>theme: indigo</code></pre><p>注：记得保存。</p><h2 id="依赖安装"><a href="#依赖安装" class="headerlink" title="依赖安装"></a>依赖安装</h2><h3 id="Less"><a href="#Less" class="headerlink" title="Less"></a>Less</h3><p>主题默认使用 less 作为 css 预处理工具。    </p><pre><code>npm install hexo-renderer-less --save</code></pre><h3 id="Feed"><a href="#Feed" class="headerlink" title="Feed"></a>Feed</h3><p>用于生成 rss。       </p><pre><code>npm install hexo-generator-feed --save</code></pre><h3 id="Json-content"><a href="#Json-content" class="headerlink" title="Json-content"></a>Json-content</h3><p>用于生成静态站点数据，用作站内搜索的数据源。      </p><pre><code>npm install hexo-generator-json-content --save</code></pre><h3 id="QRCode-可选"><a href="#QRCode-可选" class="headerlink" title="QRCode(可选)"></a>QRCode(可选)</h3><p>用于生成微信分享二维码。<br>可选，不安装时会请求 jiathis Api 生成二维码。    </p><pre><code>npm install hexo-helper-qrcode --save</code></pre><h2 id="开启分类页"><a href="#开启分类页" class="headerlink" title="开启分类页"></a>开启分类页</h2><p>仅 card theme 支持。     </p><pre><code>hexo new page categories</code></pre><p>修改 hexo/source/categories/index.md 的元数据     </p><pre><code>layout: categoriescomments: false---</code></pre><h2 id="开启标签页"><a href="#开启标签页" class="headerlink" title="开启标签页"></a>开启标签页</h2><pre><code>hexo new page tags</code></pre><p>修改 hexo/source/tags/index.md 的元数据</p><pre><code>layout: tagscomments: false---</code></pre><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><h3 id="文章截断"><a href="#文章截断" class="headerlink" title="文章截断"></a>文章截断</h3><p>在Markdown中加<!-- more -->      </p><h3 id="添加多个标签"><a href="#添加多个标签" class="headerlink" title="添加多个标签"></a>添加多个标签</h3><pre><code>tags: [a, b, c]</code></pre><p>或     </p><pre><code>tags:   - a  - b  - c</code></pre><h3 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h3><pre><code>categories: [a, b, c]</code></pre><h3 id="更改站点配色"><a href="#更改站点配色" class="headerlink" title="更改站点配色"></a>更改站点配色</h3><p>编辑 themes\indigo\source\css_partial\variable.less，更改对应的颜色变量。<br>配色参考：<a href="http://www.materialpalette.com/" target="_blank" rel="noopener">Material Design Color Palette Generator</a><br>注意：使用自定义配色时需把主题配置中的 cdn 关闭，cdn: false。     </p><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>参考：<a href="https://github.com/yscoder/hexo-theme-indigo/wiki/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98" target="_blank" rel="noopener">https://github.com/yscoder/hexo-theme-indigo/wiki/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98</a></p><h2 id="站点配置"><a href="#站点配置" class="headerlink" title="站点配置"></a>站点配置</h2><p>编辑站点配置文件 <strong>\themes\landscape</strong>的<strong>_config.yml</strong>文件。    </p><h3 id="启动主题"><a href="#启动主题" class="headerlink" title="启动主题"></a>启动主题</h3><pre><code>theme: indigo</code></pre><h3 id="基本配置"><a href="#基本配置" class="headerlink" title="基本配置"></a>基本配置</h3><h4 id="左侧菜单"><a href="#左侧菜单" class="headerlink" title="左侧菜单"></a>左侧菜单</h4><pre><code>menu:  home:    text: 主页    url: /  archives:    url: /archives  tags:    url: /tags  github:    url: https://github.com/yscoder    target: _blank  weibo:    url: http://www.weibo.com/ysweb    target: _blank  link:    text: 测试    url: /</code></pre><p>添加新菜单项时，在 menu 下增加子属性即可。属性说明如下：     </p><pre><code>menu: link:               # fontawesome图标，省略前缀，本主题前缀为 icon-，必须   text: About       # 菜单显示的文字，如果省略即默认与图标一致，首字母会转大写   url: /about       # 链接，绝对或相对路径，必须   target: _blank    # 是否跳出，省略则在当前页面打开</code></pre><h4 id="favicon"><a href="#favicon" class="headerlink" title="favicon"></a>favicon</h4><p>站点 logo，显示在浏览器当前标签页左上角。      </p><pre><code>favicon: /favicon.ico</code></pre><h4 id="头像"><a href="#头像" class="headerlink" title="头像"></a>头像</h4><p>位于左侧菜单上方     </p><pre><code>avatar: /img/logo.jpg</code></pre><h4 id="email"><a href="#email" class="headerlink" title="email"></a>email</h4><p>头像下方      </p><pre><code>email: 634206017@qq.com</code></pre><h4 id="color"><a href="#color" class="headerlink" title="color"></a>color</h4><p>设置 Android L Chrome 浏览器状态栏颜色，不需要可去除此项或设为 false。       </p><pre><code>color: &#39;#3F51B5&#39;</code></pre><h4 id="其他-1"><a href="#其他-1" class="headerlink" title="其他"></a>其他</h4><p>参考：<a href="https://github.com/yscoder/hexo-theme-indigo/wiki/%E9%85%8D%E7%BD%AE" target="_blank" rel="noopener">https://github.com/yscoder/hexo-theme-indigo/wiki/%E9%85%8D%E7%BD%AE</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;hexo-theme-indigo-主题&quot;&gt;&lt;a href=&quot;#hexo-theme-indigo-主题&quot; class=&quot;headerlink&quot; title=&quot;hexo-theme-indigo 主题&quot;&gt;&lt;/a&gt;hexo-theme-indigo 主题&lt;/h1&gt;&lt;p&gt;demo&lt;br&gt;&lt;img src=&quot;https://live.staticflickr.com/65535/47569038422_0c51df8041.jpg&quot; alt=&quot;hexo-theme-indigo&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Hexo" scheme="http://yoursite.com/categories/Hexo/"/>
    
      <category term="hexo-theme-indigo" scheme="http://yoursite.com/categories/Hexo/hexo-theme-indigo/"/>
    
    
      <category term="hexo-theme-indigo" scheme="http://yoursite.com/tags/hexo-theme-indigo/"/>
    
  </entry>
  
  <entry>
    <title>qtp破解</title>
    <link href="http://yoursite.com/1970/01/01/qtp/"/>
    <id>http://yoursite.com/1970/01/01/qtp/</id>
    <published>1970-01-01T00:00:00.000Z</published>
    <updated>2019-04-20T14:22:35.124Z</updated>
    
    <content type="html"><![CDATA[<h1 id="qtp安装与破解"><a href="#qtp安装与破解" class="headerlink" title="qtp安装与破解"></a>qtp安装与破解</h1><p>准备：</p><ul><li>QTP 10.0</li><li>破解文件<a id="more"></a><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2></li></ul><p>链接: <a href="https://pan.baidu.com/s/19TGLWjd_znKFM8RZkj1ITg" target="_blank" rel="noopener">https://pan.baidu.com/s/19TGLWjd_znKFM8RZkj1ITg</a> 提取码: 9wjv</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://live.staticflickr.com/65535/46735361215_83283715cc.jpg" alt="qtp" title>                </div>                <div class="image-caption">qtp</div>            </figure><p>选择 <strong>QTP10.iso</strong>,解压后点击文件目录中的 <strong>setup.exe</strong>,双击运行。<br>按照图片顺序进行操作。   </p><p><img src="https://live.staticflickr.com/65535/40684441953_317366f332.jpg" alt></p><p><img src="https://live.staticflickr.com/65535/40684441833_c75926247c.jpg" alt></p><p><img src="https://live.staticflickr.com/65535/40684441463_f2dd1a0d8a.jpg" alt></p><p><img src="https://live.staticflickr.com/65535/40684441383_e54b1aae08.jpg" alt></p><p><img src="https://live.staticflickr.com/65535/46735360805_7d747db5fc.jpg" alt></p><p><img src="https://live.staticflickr.com/65535/40684441273_cd0bda4b8a.jpg" alt></p><p><img src="https://live.staticflickr.com/65535/40684441043_0636ac9c5f.jpg" alt></p><p><img src="https://live.staticflickr.com/65535/46735360575_702bbd5e7d.jpg" alt></p><p><img src="https://live.staticflickr.com/65535/40684440933_6a15dbbafe.jpg" alt></p><p><img src="https://live.staticflickr.com/65535/46735360435_1b00578c95.jpg" alt></p><p><img src="https://live.staticflickr.com/65535/40684440783_c657959660.jpg" alt></p><p><img src="https://live.staticflickr.com/65535/46735360325_ca3acbf638.jpg" alt></p><p><img src="https://live.staticflickr.com/65535/46735360275_571ab8de4e.jpg" alt></p><p><img src="https://live.staticflickr.com/65535/40684440503_e69cee4487.jpg" alt></p><h2 id="破解"><a href="#破解" class="headerlink" title="破解"></a>破解</h2><p>1.在<strong>c:\program files\common files\mercury interactive</strong>目录下新建一个文件夹：<strong>License Manager</strong><br>注：<strong>64位操作系统</strong>在<strong>c:\program files(x86)\common files\mercury interactive</strong>以下步骤以此类推。</p><p>2.将下载的文件中的<strong>qtp破解</strong>解压，将<strong>mgn-mqt8.2.exe</strong>复制到qtp的安装路径的<strong>bin文件夹中</strong>，然后以管理员身份运行。</p><p>3.打开<strong>c:\program files\common files\mercury interactive\License Manager</strong>中的<strong>lservrc</strong>文件。</p><p>4.将<strong>lservrc</strong>文件中的内容（<strong>将”QuickTestPro”之前的所有字符复制进去，不包括”QuickTestPro”字符</strong>）粘贴到如下图中。</p><p><img src="https://live.staticflickr.com/65535/40684440503_e69cee4487.jpg" alt></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;qtp安装与破解&quot;&gt;&lt;a href=&quot;#qtp安装与破解&quot; class=&quot;headerlink&quot; title=&quot;qtp安装与破解&quot;&gt;&lt;/a&gt;qtp安装与破解&lt;/h1&gt;&lt;p&gt;准备：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;QTP 10.0&lt;/li&gt;
&lt;li&gt;破解文件
    
    </summary>
    
      <category term="软件测试" scheme="http://yoursite.com/categories/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95/"/>
    
      <category term="qtp" scheme="http://yoursite.com/categories/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95/qtp/"/>
    
    
      <category term="软件测试" scheme="http://yoursite.com/tags/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95/"/>
    
      <category term="qtp" scheme="http://yoursite.com/tags/qtp/"/>
    
  </entry>
  
  <entry>
    <title>缺陷跟踪</title>
    <link href="http://yoursite.com/1970/01/01/%E7%BC%BA%E9%99%B7%E8%B7%9F%E8%B8%AA/"/>
    <id>http://yoursite.com/1970/01/01/缺陷跟踪/</id>
    <published>1970-01-01T00:00:00.000Z</published>
    <updated>2019-07-18T14:53:43.348Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简答题"><a href="#简答题" class="headerlink" title="简答题"></a>简答题</h1><p><strong>开发各阶段缺陷放大图</strong>    </p><p><img src="https://live.staticflickr.com/65535/48230009166_9535028fe4_z.jpg" alt><br><a id="more"></a><br><strong>同行评审</strong>        </p><ul><li>同行评审的种类<ul><li>正式评审</li><li>技术审查</li><li>走查</li></ul></li></ul><p><strong>同行评审方式的选择</strong>        </p><ul><li>工作产品刚勾画，起草时—走查</li><li>完成了某一个单独的章节时—技术审查</li><li>整个产品完成时—正式评审</li></ul><p><strong>软件缺陷发现</strong>         </p><ul><li>同行评审</li><li>软件测试</li><li>管理评审</li><li>PPQA发现</li><li>项目组内部发现</li><li>客户反馈</li></ul><p><strong>软件缺陷生命周期</strong><br>软件缺陷生命周期主要由四个阶段组成：    </p><ul><li>识别</li><li>调查</li><li>改正</li><li>总结</li></ul><p><strong>缺陷度量</strong>     </p><ul><li>缺陷度量：CMMI第四级（量化管理级）的软件组织会根据已收集的缺陷数据，采用统计过程控制（Statistical Process Control,SPC)的方法建立软件过程能力基线（Process Capability Baseline，PCB），定量地刻划出软件或过程的特点，进行量化管理。     </li><li><p>SPC:利用统计方法对过程中的各个阶段进行控制，从而达到改进与保证质量的目的；强调以全过程的预防为主；方法是建立控制图</p></li><li><p>PCB：用基线形式量化地表示过程能力；PCB是个不断随着数据累积校正的过程，本身数据收集必须遵循客观、准确、事实，确保组织基线可以持续为各项目研发作为参考标准；运用PCB有助于对过程的分析和改进；</p></li><li><p>PCB是一组能力指标，是过程实际能力的具体体现。通常包括期望值（Mean）、控制上限（Upper Control Limit，UCL）、控制下限（Low Control Limit，LCL）。以缺陷密度为例， Mean描述了未来项目的缺陷密度的预期值，UCL和LCL描述了未来项目的缺陷密度的合理变化范围。</p></li><li>这样的过程能力基线可用来：<br>(1)帮助未来的项目设立量化的项目质量目标；<br>(2)理解和控制未来项目的实际结果。      </li></ul><p><strong>软件缺陷跟踪管理流程</strong>     </p><ul><li>总体流程    </li></ul><p><img src="https://live.staticflickr.com/65535/48230226367_ea82bd2d77_z.jpg" alt="总体流程"></p><ul><li>提交流程</li></ul><p><img src="https://live.staticflickr.com/65535/48230150476_9c63e6e2f0_z.jpg" alt="提交流程"></p><ul><li>修复流程</li></ul><p><img src="https://live.staticflickr.com/65535/48230149591_5d240288b8_z.jpg" alt="修复流程"></p><ul><li>验证流程</li></ul><p><img src="https://live.staticflickr.com/65535/48230219452_8c70aa0c9a_z.jpg" alt="验证流程"></p><ul><li>拒绝流程</li></ul><p><img src="https://live.staticflickr.com/65535/48230147771_5b10ccc80d_z.jpg" alt="拒绝流程"></p><ul><li>争议处理流程</li></ul><p><img src="https://live.staticflickr.com/65535/48230218987_a525c632fb_z.jpg" alt="争议处理流程"></p><ul><li>缺陷挂起流程</li></ul><p><img src="https://live.staticflickr.com/65535/48230148446_2240e906ec_z.jpg" alt="挂起流程"></p><p><strong>缺陷状态</strong><br><strong>常用软件缺陷状态</strong>     </p><table><thead><tr><th>编号</th><th>缺陷状态</th><th>描述</th></tr></thead><tbody><tr><td>1</td><td>提交（Submitted或New）</td><td>已提交的缺陷</td></tr><tr><td>2</td><td>打开（Open或Active）</td><td>经审查后确认的缺陷，等待处理</td></tr><tr><td>3</td><td>拒绝（Rejected、Refuse或Not a bug）</td><td>经审查确认不是缺陷、不需要修复或不需要提交</td></tr><tr><td>4</td><td>修复（Resolved或Fixed）</td><td>或为Fixed。缺陷已被修复</td></tr><tr><td>5</td><td>关闭（Closed或Inactive）</td><td>经审查确认已被修复的缺陷，可将其关闭</td></tr><tr><td>6</td><td>推迟（Later、Pending或Deferred）</td><td>当前无法修复，以后条件具备时再解决，但要确定修复的日期</td></tr><tr><td>7</td><td>重新打开（Reopen)</td><td>经过修复的缺陷未通过验证测试，或已关闭的缺陷重新出现</td></tr></tbody></table><p><strong>软件缺陷报告</strong><br>“5C”原则：     </p><ul><li>内容正确(Correct)：每个组成部分的描述正确，不会引起误解。</li><li>内容清晰(Clear)：每个组成部分的描述清晰，易于理解。</li><li>步骤简洁(Concise)：只包含必不可少的信息，不包括任何多余的内容。</li><li>结构完整(Complete)：包含复现该缺陷的完整步骤和其他本质信息。</li><li>风格一致（Consistent）：按照一致的格式书写全部缺陷报告。</li></ul><p><strong>优秀的缺陷报告</strong>     </p><table><thead><tr><th style="text-align:left">重现步骤</th></tr></thead><tbody><tr><td style="text-align:left">(1) 打开编辑文字的软件     （2）创建一个新文档（这个文档可以录入文字）    （3）在这个文档里随意录入一两行文字（任意）    （4）选中录入的一两行文字，选择Font菜单，然后选择Arial字体格式     （5）一两行文字变成了无意义的乱字符</td></tr><tr><td style="text-align:left"><strong>期望结果</strong></td></tr><tr><td style="text-align:left">当用户选择已录入的文字并改变文字格式时，文本应该正确显示选中的文字格式，不会显示成乱字符</td></tr><tr><td style="text-align:left"><strong>实际结果</strong></td></tr><tr><td style="text-align:left">这是字体格式的问题，如果把文字格式改变成Arial前保存文件，缺陷不会出现。缺陷仅发生在Win98，且改变文字格式成其他字体格式时正常。</td></tr></tbody></table><p><strong>缺陷工具</strong>：</p><ul><li>Bugzilla是一款免费、跨平台的开源缺陷跟踪系统，最初是专门为Unix定制开发的，目前也可在windows、Mac OS平台安装使用，在wins操作系统下的安装和配置略为复杂。bugzilla历史悠久、功能强大、受到很多企业用户的欢迎。</li><li>Mantis是一款开源的基于PHP的轻量级跟踪系统，简洁灵活，安装容易，扩展性强，其实用性足以满足中小型项目的缺陷管理和跟踪需要。</li><li>禅道：集产品管理、项目管理、质量管理、文档管理、组织管理和事务管理于一体，避免了一个团队使用多个工具，较bugfree功能更全面。</li><li>TestCenter是一款集测试需求、测试用例、测试过程、测试结果、以及测试报告管理的测试管理工具。</li><li>BugFree基于浏览器，简单、方便、易用的免费、开源的缺陷管理工具。</li></ul><h1 id="大题"><a href="#大题" class="headerlink" title="大题"></a>大题</h1><p><strong>注入-发现矩阵实例</strong>     </p><table><thead><tr><th>缺陷注入阶段/缺陷发现阶段</th><th>需求阶段</th><th>概要设计阶段</th><th>详细设计阶段</th><th>编码阶段</th><th>单元测试阶段</th><th>集成测试阶段</th><th>系统测试阶段</th><th>现场阶段</th><th>注入合计</th></tr></thead><tbody><tr><td>需求评审</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>概要设计审查</td><td>49</td><td>681</td><td></td><td></td><td></td><td></td><td></td><td></td><td>730</td></tr><tr><td>详细设计审查</td><td>6</td><td>42</td><td>681</td><td></td><td></td><td></td><td></td><td></td><td>729</td></tr><tr><td>代码审查</td><td>12</td><td>28</td><td>114</td><td>941</td><td></td><td></td><td></td><td></td><td>1095</td></tr><tr><td>单元测试</td><td>21</td><td>43</td><td>43</td><td>223</td><td>2</td><td></td><td></td><td></td><td>332</td></tr><tr><td>集成测试</td><td>20</td><td>41</td><td>61</td><td>261</td><td>——</td><td>4</td><td></td><td></td><td>387</td></tr><tr><td>系统测试</td><td>6</td><td>8</td><td>24</td><td>72</td><td>——</td><td>——</td><td>1</td><td></td><td>111</td></tr><tr><td>现场</td><td>8</td><td>16</td><td>16</td><td>40</td><td>——</td><td>——</td><td>——</td><td>1</td><td>81</td></tr><tr><td>发现合计</td><td>122</td><td>859</td><td>939</td><td>1537</td><td>2</td><td>4</td><td>1</td><td>1</td><td>3465</td></tr><tr><td>本阶段缺陷移除率</td><td>——</td><td>74%</td><td>61%</td><td>55%</td><td>36%</td><td>67%</td><td>58%</td><td></td><td></td></tr></tbody></table><p>思路：<br>单元测试：<br>332/（122+859+939+1537+2-730-729-1095）x100%=36%</p><p><strong>故障树</strong><br>参考：<a href="https://wenku.baidu.com/view/abfa08eb19e8b8f67c1cb978.html" target="_blank" rel="noopener">故障树PPT</a></p><p><strong>故障树分析</strong><br><strong>逻辑门</strong><br><img src="https://wiki.mbalib.com/w/images/e/e0/%E6%95%85%E9%9A%9C%E6%A0%91%E5%88%86%E6%9E%902.jpg" alt></p><p>例题<br><img src="https://live.staticflickr.com/65535/48231308961_eeca32738a_z.jpg" alt>    </p><p>使用MOCUS算法确定最小割集。首先画出一个足够大的矩阵表格，然后按下面的步骤填充矩阵：     </p><ol><li>将故障事件门的字符放在左上角（0，0）单元格</li><li>将每个门的字符用其下方较低级别的门或基本事件的字符或数字替换，重复此过程。</li><li>对于或门：将字符写成<strong>一竖排</strong>（<strong>也就是竖着写</strong>）；对于与门：将字符写成<strong>一横排</strong>。</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;简答题&quot;&gt;&lt;a href=&quot;#简答题&quot; class=&quot;headerlink&quot; title=&quot;简答题&quot;&gt;&lt;/a&gt;简答题&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;开发各阶段缺陷放大图&lt;/strong&gt;    &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://live.staticflickr.com/65535/48230009166_9535028fe4_z.jpg&quot; alt&gt;&lt;br&gt;
    
    </summary>
    
      <category term="期末复习" scheme="http://yoursite.com/categories/%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/"/>
    
      <category term="缺陷跟踪" scheme="http://yoursite.com/categories/%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/%E7%BC%BA%E9%99%B7%E8%B7%9F%E8%B8%AA/"/>
    
    
      <category term="期末复习" scheme="http://yoursite.com/tags/%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/"/>
    
      <category term="缺陷跟踪" scheme="http://yoursite.com/tags/%E7%BC%BA%E9%99%B7%E8%B7%9F%E8%B8%AA/"/>
    
  </entry>
  
  <entry>
    <title>个人觉得比较好的一些插件</title>
    <link href="http://yoursite.com/1970/01/01/%E6%8F%92%E4%BB%B6/"/>
    <id>http://yoursite.com/1970/01/01/插件/</id>
    <published>1970-01-01T00:00:00.000Z</published>
    <updated>2019-05-08T13:36:55.386Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Visual-Studio-Code"><a href="#Visual-Studio-Code" class="headerlink" title="Visual Studio Code"></a>Visual Studio Code</h1><h2 id="Chinese-Simplified-Language-Pack-for-Visual-Studio-Code"><a href="#Chinese-Simplified-Language-Pack-for-Visual-Studio-Code" class="headerlink" title="Chinese (Simplified) Language Pack for Visual Studio Code"></a>Chinese (Simplified) Language Pack for Visual Studio Code</h2><p>适用于 VS Code 的中文（简体）语言包。     </p><p><img src="https://live.staticflickr.com/7810/47599193841_ce5cc251fe.jpg" alt="Chinese (Simplified) Language Pack for Visual Studio Code"></p><a id="more"></a><h2 id="Markdown-Preview-Enhanced"><a href="#Markdown-Preview-Enhanced" class="headerlink" title="Markdown Preview Enhanced"></a>Markdown Preview Enhanced</h2><p>Markdown Preview Enhanced 是一款为 Atom 以及 Visual Studio Code 编辑器编写的超级强大的 Markdown 插件。 这款插件意在让你拥有飘逸的 Markdown 写作体验。    </p><p><img src="https://user-images.githubusercontent.com/1908863/28227953-eb6eefa4-68a1-11e7-8769-96ea83facf3b.png" alt="Markdown Preview Enhanced"></p><h2 id="City-Lights-Icon-package"><a href="#City-Lights-Icon-package" class="headerlink" title="City Lights Icon package"></a>City Lights Icon package</h2><p>一个美化 Visual Studio Code 图标的插件。</p><p><img src="https://raw.githubusercontent.com/yummygum/city-lights-icons-vsc/master/city-lights-icon-preview.gif" alt="City Lights Icon package"></p><h1 id="浏览器插件"><a href="#浏览器插件" class="headerlink" title="浏览器插件"></a>浏览器插件</h1><h2 id="广告净化器"><a href="#广告净化器" class="headerlink" title="广告净化器"></a>广告净化器</h2><p>免费高效的广告过滤工具：可以过滤烦人的视频广告、弹窗广告、大横幅广告等网页广告，让你清爽浏览网页。    </p><p>下载地址：<a href="https://chrome.google.com/webstore/detail/%E5%B9%BF%E5%91%8A%E5%87%80%E5%8C%96%E5%99%A8/cbiaicifbmeokbhollcjfeaoakmppfeh?hl=zh-CN" target="_blank" rel="noopener">谷歌浏览器</a>   <a href="https://www.yiclear.com/download/" target="_blank" rel="noopener">火狐浏览器</a></p><h2 id="Convertio"><a href="#Convertio" class="headerlink" title="Convertio"></a>Convertio</h2><p>一个文件转换器。<br>网址：<a href="https://convertio.co/zh/" target="_blank" rel="noopener">https://convertio.co/zh/</a></p><h1 id="适用于Chrome的Web服务器"><a href="#适用于Chrome的Web服务器" class="headerlink" title="适用于Chrome的Web服务器"></a>适用于Chrome的Web服务器</h1><h2 id="Web-Server-for-Chrome"><a href="#Web-Server-for-Chrome" class="headerlink" title="Web Server for Chrome"></a>Web Server for Chrome</h2><p>适用于Chrome的Web服务器使用HTTP通过网络从本地文件夹提供网页。可离线运行。</p><p><img src="https://live.staticflickr.com/65535/33926865808_92c256c9fb_z.jpg" alt="Web Server for Chrome"></p><p><img src="https://live.staticflickr.com/65535/32860400467_9b3c5a39ba_z.jpg" alt="Web Server for Chrome"></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Visual-Studio-Code&quot;&gt;&lt;a href=&quot;#Visual-Studio-Code&quot; class=&quot;headerlink&quot; title=&quot;Visual Studio Code&quot;&gt;&lt;/a&gt;Visual Studio Code&lt;/h1&gt;&lt;h2 id=&quot;Chinese-Simplified-Language-Pack-for-Visual-Studio-Code&quot;&gt;&lt;a href=&quot;#Chinese-Simplified-Language-Pack-for-Visual-Studio-Code&quot; class=&quot;headerlink&quot; title=&quot;Chinese (Simplified) Language Pack for Visual Studio Code&quot;&gt;&lt;/a&gt;Chinese (Simplified) Language Pack for Visual Studio Code&lt;/h2&gt;&lt;p&gt;适用于 VS Code 的中文（简体）语言包。     &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://live.staticflickr.com/7810/47599193841_ce5cc251fe.jpg&quot; alt=&quot;Chinese (Simplified) Language Pack for Visual Studio Code&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="插件" scheme="http://yoursite.com/categories/%E6%8F%92%E4%BB%B6/"/>
    
    
      <category term="插件" scheme="http://yoursite.com/tags/%E6%8F%92%E4%BB%B6/"/>
    
  </entry>
  
</feed>
